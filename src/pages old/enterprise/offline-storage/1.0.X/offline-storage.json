{
  "path": "/docs/enterprise/offline-storage/1.0.X/offline-storage",
  "title": "Offline Storage",
  "template": "enterprise-plugin",
  "version": "1.0.0",
  "minor": "1.0.X",
  "body": [
    "div",
    null,
    [
      "p",
      {
        "class": "intro"
      },
      "Ionic Offline Storage is a cross-platform data storage system that works on iOS and Android, and Electron on desktop. Powered by ",
      [
        "a",
        {
          "href": "https://docs.couchbase.com/couchbase-lite/2.6/index.html"
        },
        "Couchbase Lite"
      ],
      ", a NoSQL database engine that provides simple yet powerful query, replication, and sync APIs."
    ],
    " ",
    [
      "p",
      {
        "class": "intro"
      },
      "This solution makes it easy to add offline storage to Ionic apps that are secure (encrypted on device), highly performant, and provide advanced data querying. ",
      [
        "a",
        {
          "href": "https://ionicframework.com/offline-storage"
        },
        "Learn more."
      ]
    ],
    " ",
    [
      "p",
      {
        "class": "intro"
      },
      [
        "native-ent-install",
        {
          "plugin-id": "offline-storage",
          "variables": ""
        }
      ]
    ],
    " ",
    [
      "h2",
      {
        "id": "project-requirements"
      },
      " ",
      [
        "a",
        {
          "href": "#project-requirements"
        },
        "Project Requirements"
      ],
      " "
    ],
    " ",
    [
      "p",
      null,
      "Couchbase Lite requires a min SDK target for Android of at least 19. Make sure you have this in your ",
      [
        "code",
        null,
        "config.xml"
      ],
      " at a minimum:"
    ],
    " ",
    [
      "docs-code",
      {
        "language": "xml"
      },
      " ",
      [
        "pre",
        null,
        [
          "code",
          null,
          [
            "span",
            {
              "class": "token tag"
            },
            [
              "span",
              {
                "class": "token tag"
              },
              [
                "span",
                {
                  "class": "token punctuation"
                },
                "<"
              ],
              "preference"
            ],
            " ",
            [
              "span",
              {
                "class": "token attr-name"
              },
              "name"
            ],
            [
              "span",
              {
                "class": "token attr-value"
              },
              [
                "span",
                {
                  "class": "token punctuation"
                },
                "="
              ],
              [
                "span",
                {
                  "class": "token punctuation"
                },
                "\""
              ],
              "android-minSdkVersion",
              [
                "span",
                {
                  "class": "token punctuation"
                },
                "\""
              ]
            ],
            " ",
            [
              "span",
              {
                "class": "token attr-name"
              },
              "value"
            ],
            [
              "span",
              {
                "class": "token attr-value"
              },
              [
                "span",
                {
                  "class": "token punctuation"
                },
                "="
              ],
              [
                "span",
                {
                  "class": "token punctuation"
                },
                "\""
              ],
              "19",
              [
                "span",
                {
                  "class": "token punctuation"
                },
                "\""
              ]
            ],
            " ",
            [
              "span",
              {
                "class": "token punctuation"
              },
              "/>"
            ]
          ]
        ]
      ],
      " "
    ],
    " ",
    [
      "p",
      null,
      "To use additional features such as cloud data sync, data replication, conflict resolution, and delta sync, a subscription to Couchbase Server is required. To learn more, please ",
      [
        "a",
        {
          "href": "https://ionicframework.com/enterprise/contact"
        },
        "get in touch"
      ],
      "."
    ],
    " ",
    [
      "h2",
      {
        "id": "reference-apps"
      },
      " ",
      [
        "a",
        {
          "href": "#reference-apps"
        },
        "Reference Apps"
      ],
      " "
    ],
    " ",
    [
      "p",
      null,
      "1) A full ",
      [
        "a",
        {
          "href": "https://github.com/ionic-team/cs-demo-couchbase-lite"
        },
        "CRUD implementation"
      ],
      ", including querying, responding to data changes, and deleting documents. Follow along with the corresponding ",
      [
        "a",
        {
          "href": "https://ionicframework.com/blog/build-secure-offline-apps-with-ionic-couchbase-lite/"
        },
        "blog post"
      ],
      "."
    ],
    " ",
    [
      "p",
      null,
      "2) A complete ",
      [
        "a",
        {
          "href": "https://github.com/ionic-team/demo-offlinestorage-search"
        },
        "offline search experience"
      ],
      " that includes advanced querying examples, multiple filters, and wildcard searches. Follow along with the corresponding ",
      [
        "a",
        {
          "href": "https://youtu.be/_2C047pQwxU?t=1003"
        },
        "webinar video"
      ],
      "."
    ],
    " ",
    [
      "h2",
      {
        "id": "getting-started"
      },
      " ",
      [
        "a",
        {
          "href": "#getting-started"
        },
        "Getting Started"
      ],
      " "
    ],
    " ",
    [
      "p",
      null,
      "After installing the plugin, import ",
      [
        "code",
        null,
        "@ionic-enterprise/offline-storage"
      ],
      " into the desired class (A dedicated service class that encapsulates Offline Storage logic is recommended)."
    ],
    " ",
    [
      "docs-code",
      {
        "language": "typescript"
      },
      " ",
      [
        "pre",
        null,
        [
          "code",
          null,
          [
            "span",
            {
              "class": "token keyword"
            },
            "import"
          ],
          " ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "{"
          ],
          "\n    BasicAuthenticator",
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          "\n    CordovaEngine",
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          "\n    Database",
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          "\n    ",
          [
            "span",
            {
              "class": "token builtin"
            },
            "Function"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          "\n    Meta",
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          "\n    MutableDocument",
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          "\n    QueryBuilder",
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          "\n    SelectResult",
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          "\n    DataSource",
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          "\n    Expression",
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          "\n    Ordering",
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          "\n    Query",
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          "\n    ResultSet",
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          "\n    Result",
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          "\n    Replicator",
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          "\n    ReplicatorConfiguration",
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          "\n    ReplicatorChange",
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          "\n    URLEndpoint",
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          "\n    ArrayFunction",
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          "\n    PropertyExpression",
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          "\n    Join\n",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "}"
          ],
          " ",
          [
            "span",
            {
              "class": "token keyword"
            },
            "from"
          ],
          " ",
          [
            "span",
            {
              "class": "token string"
            },
            "'@ionic-enterprise/offline-storage'"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ";"
          ]
        ]
      ],
      " "
    ],
    " ",
    [
      "p",
      null,
      "Next, initialize the database:"
    ],
    " ",
    [
      "docs-code",
      {
        "language": "typescript"
      },
      " ",
      [
        "pre",
        null,
        [
          "code",
          null,
          [
            "span",
            {
              "class": "token comment"
            },
            "/*  \n    Note about encryption: In a real-world app, the encryption key \n    should not be hardcoded like it is here. One strategy is to \n    auto generate a unique encryption key per user on initial app \n    load, then store it securely in the device's keychain for later\n    retrieval. Ionic's Identity Vault plugin is an option. Using \n    IV’s storage API, you can ensure that the key cannot be read\n    or accessed without the user being authenticated first.\n*/"
          ],
          "\n",
          [
            "span",
            {
              "class": "token keyword"
            },
            "private"
          ],
          " ",
          [
            "span",
            {
              "class": "token keyword"
            },
            "async"
          ],
          " ",
          [
            "span",
            {
              "class": "token function"
            },
            "initializeDatabase"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token operator"
            },
            ":"
          ],
          " ",
          [
            "span",
            {
              "class": "token builtin"
            },
            "Promise"
          ],
          [
            "span",
            {
              "class": "token operator"
            },
            "<"
          ],
          [
            "span",
            {
              "class": "token keyword"
            },
            "void"
          ],
          [
            "span",
            {
              "class": "token operator"
            },
            ">"
          ],
          " ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "{"
          ],
          "\n    ",
          [
            "span",
            {
              "class": "token keyword"
            },
            "return"
          ],
          " ",
          [
            "span",
            {
              "class": "token keyword"
            },
            "new"
          ],
          " ",
          [
            "span",
            {
              "class": "token class-name"
            },
            "Promise"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token parameter"
            },
            "resolve"
          ],
          " ",
          [
            "span",
            {
              "class": "token operator"
            },
            "=>"
          ],
          " ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "{"
          ],
          "\n        IonicCBL",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "onReady"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token keyword"
            },
            "async"
          ],
          " ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          " ",
          [
            "span",
            {
              "class": "token operator"
            },
            "=>"
          ],
          " ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "{"
          ],
          "\n            ",
          [
            "span",
            {
              "class": "token keyword"
            },
            "const"
          ],
          " config ",
          [
            "span",
            {
              "class": "token operator"
            },
            "="
          ],
          " ",
          [
            "span",
            {
              "class": "token keyword"
            },
            "new"
          ],
          " ",
          [
            "span",
            {
              "class": "token class-name"
            },
            "DatabaseConfiguration"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ";"
          ],
          "\n            config",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "setEncryptionKey"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "'8e31f8f6-60bd-482a-9c70-69855dd02c38'"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ";"
          ],
          "\n            ",
          [
            "span",
            {
              "class": "token keyword"
            },
            "this"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          "database ",
          [
            "span",
            {
              "class": "token operator"
            },
            "="
          ],
          " ",
          [
            "span",
            {
              "class": "token keyword"
            },
            "new"
          ],
          " ",
          [
            "span",
            {
              "class": "token class-name"
            },
            "Database"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "'DATABASE_NAME'"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          " config",
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ";"
          ],
          "\n            ",
          [
            "span",
            {
              "class": "token keyword"
            },
            "this"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          "database",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "setEngine"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "\n            ",
          [
            "span",
            {
              "class": "token keyword"
            },
            "new"
          ],
          " ",
          [
            "span",
            {
              "class": "token class-name"
            },
            "CordovaEngine"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "{"
          ],
          "\n                allResultsChunkSize",
          [
            "span",
            {
              "class": "token operator"
            },
            ":"
          ],
          " ",
          [
            "span",
            {
              "class": "token number"
            },
            "9999"
          ],
          "\n            ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "}"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ";"
          ],
          "\n            ",
          [
            "span",
            {
              "class": "token keyword"
            },
            "await"
          ],
          " ",
          [
            "span",
            {
              "class": "token keyword"
            },
            "this"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          "database",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "open"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ";"
          ],
          "\n\n            ",
          [
            "span",
            {
              "class": "token function"
            },
            "resolve"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ";"
          ],
          "\n        ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "}"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ";"
          ],
          "\n    ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "}"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ";"
          ],
          "\n",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "}"
          ]
        ]
      ],
      " "
    ],
    " ",
    [
      "p",
      null,
      "Create a new document and save it to the database:"
    ],
    " ",
    [
      "docs-code",
      {
        "language": "typescript"
      },
      " ",
      [
        "pre",
        null,
        [
          "code",
          null,
          [
            "span",
            {
              "class": "token comment"
            },
            "// Create a new document (i.e. a record) in the database."
          ],
          "\n",
          [
            "span",
            {
              "class": "token keyword"
            },
            "let"
          ],
          " mutableDoc ",
          [
            "span",
            {
              "class": "token operator"
            },
            "="
          ],
          " ",
          [
            "span",
            {
              "class": "token keyword"
            },
            "new"
          ],
          " ",
          [
            "span",
            {
              "class": "token class-name"
            },
            "MutableDocument"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          "\n    ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "setFloat"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"version\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          " ",
          [
            "span",
            {
              "class": "token number"
            },
            "2.0"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          "\n    ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "setString"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"type\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          " ",
          [
            "span",
            {
              "class": "token string"
            },
            "\"SDK\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          "\n    ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "setString"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"company\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          " ",
          [
            "span",
            {
              "class": "token string"
            },
            "\"Ionic\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ";"
          ],
          "\n\n",
          [
            "span",
            {
              "class": "token comment"
            },
            "// Save it to the database."
          ],
          "\n",
          [
            "span",
            {
              "class": "token keyword"
            },
            "await"
          ],
          " ",
          [
            "span",
            {
              "class": "token keyword"
            },
            "this"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          "database",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "save"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "mutableDoc",
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ";"
          ]
        ]
      ],
      " "
    ],
    " ",
    [
      "p",
      null,
      "Run a simple Query:"
    ],
    " ",
    [
      "docs-code",
      {
        "language": "typescript"
      },
      " ",
      [
        "pre",
        null,
        [
          "code",
          null,
          [
            "span",
            {
              "class": "token comment"
            },
            "// Create a query to fetch documents of type SDK."
          ],
          "\n",
          [
            "span",
            {
              "class": "token keyword"
            },
            "let"
          ],
          " query ",
          [
            "span",
            {
              "class": "token operator"
            },
            "="
          ],
          " QueryBuilder",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "select"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "SelectResult",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "property"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"version\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          "\n        SelectResult",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "property"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"type\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          "\n        SelectResult",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "property"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"company\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          "\n    ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token keyword"
            },
            "from"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "DataSource",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "database"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "database",
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          "\n    ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "where"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "Expression",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "property"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"type\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "equalTo"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "Expression",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "string"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"SDK\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ";"
          ],
          "\n",
          [
            "span",
            {
              "class": "token keyword"
            },
            "const"
          ],
          " result ",
          [
            "span",
            {
              "class": "token operator"
            },
            "="
          ],
          " ",
          [
            "span",
            {
              "class": "token keyword"
            },
            "await"
          ],
          " ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token keyword"
            },
            "await"
          ],
          " query",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "execute"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "allResults"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ";"
          ],
          "\n",
          [
            "span",
            {
              "class": "token builtin"
            },
            "console"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "log"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"Number of rows:  \""
          ],
          " ",
          [
            "span",
            {
              "class": "token operator"
            },
            "+"
          ],
          " result",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "size"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ";"
          ]
        ]
      ],
      " "
    ],
    " ",
    [
      "p",
      null,
      "Build and run. You should see a row count of one printed to the console, as the document was successfully persisted to the database."
    ],
    " ",
    [
      "p",
      null,
      "Bi-directional replications with Sync Gateway:"
    ],
    " ",
    [
      "docs-code",
      {
        "language": "typescript"
      },
      " ",
      [
        "pre",
        null,
        [
          "code",
          null,
          [
            "span",
            {
              "class": "token comment"
            },
            "// Create replicators to push and pull changes to and from the cloud."
          ],
          "\n",
          [
            "span",
            {
              "class": "token keyword"
            },
            "let"
          ],
          " targetEndpoint ",
          [
            "span",
            {
              "class": "token operator"
            },
            "="
          ],
          " ",
          [
            "span",
            {
              "class": "token keyword"
            },
            "new"
          ],
          " ",
          [
            "span",
            {
              "class": "token class-name"
            },
            "URLEndpoint"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token keyword"
            },
            "new"
          ],
          " ",
          [
            "span",
            {
              "class": "token class-name"
            },
            "URI"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"ws://localhost:4984/example_sg_db\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ";"
          ],
          "\n",
          [
            "span",
            {
              "class": "token keyword"
            },
            "let"
          ],
          " replConfig ",
          [
            "span",
            {
              "class": "token operator"
            },
            "="
          ],
          " ",
          [
            "span",
            {
              "class": "token keyword"
            },
            "new"
          ],
          " ",
          [
            "span",
            {
              "class": "token class-name"
            },
            "ReplicatorConfiguration"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "database",
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          " targetEndpoint",
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ";"
          ],
          "\nreplConfig",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "setReplicatorType"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "ReplicatorConfiguration",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          "ReplicatorType",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token constant"
            },
            "PUSH_AND_PULL"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ";"
          ],
          "\n\n",
          [
            "span",
            {
              "class": "token comment"
            },
            "// Add authentication."
          ],
          "\nreplConfig",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "setAuthenticator"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token keyword"
            },
            "new"
          ],
          " ",
          [
            "span",
            {
              "class": "token class-name"
            },
            "BasicAuthenticator"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"john\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          " ",
          [
            "span",
            {
              "class": "token string"
            },
            "\"pass\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ";"
          ],
          "\n\n",
          [
            "span",
            {
              "class": "token comment"
            },
            "// Create replicator."
          ],
          "\n",
          [
            "span",
            {
              "class": "token keyword"
            },
            "let"
          ],
          " replicator ",
          [
            "span",
            {
              "class": "token operator"
            },
            "="
          ],
          " ",
          [
            "span",
            {
              "class": "token keyword"
            },
            "new"
          ],
          " ",
          [
            "span",
            {
              "class": "token class-name"
            },
            "Replicator"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "replConfig",
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ";"
          ],
          "\n\n",
          [
            "span",
            {
              "class": "token comment"
            },
            "// Listen to replicator change events."
          ],
          "\nreplicator",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "addChangeListener"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token parameter"
            },
            "status"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          " ",
          [
            "span",
            {
              "class": "token operator"
            },
            "=>"
          ],
          " ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "{"
          ],
          "\n",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "}"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ";"
          ],
          "\n\n",
          [
            "span",
            {
              "class": "token comment"
            },
            "// Start replication."
          ],
          "\nreplicator",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "start"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ";"
          ]
        ]
      ],
      " "
    ],
    " ",
    [
      "p",
      null,
      "Beyond these docs, reference ",
      [
        "a",
        {
          "href": "https://docs.couchbase.com/couchbase-lite/current/swift.html#blobs"
        },
        "Couchbase Lite's documentation"
      ],
      " for more functionality details and examples."
    ],
    " ",
    [
      "h2",
      {
        "id": "database"
      },
      " ",
      [
        "a",
        {
          "href": "#database"
        },
        "Database"
      ],
      " "
    ],
    " ",
    [
      "h3",
      {
        "id": "new-database"
      },
      " ",
      [
        "a",
        {
          "href": "#new-database"
        },
        "New Database"
      ],
      " "
    ],
    " ",
    [
      "p",
      null,
      "As the top-level entity in the API, new databases can be created using the ",
      [
        "code",
        null,
        "Database"
      ],
      " class by passing in a name, configuration, or both.\nThe following example creates a database using the ",
      [
        "code",
        null,
        "Database(name: string)"
      ],
      " constructor:"
    ],
    " ",
    [
      "docs-code",
      {
        "language": "typescript"
      },
      " ",
      [
        "pre",
        null,
        [
          "code",
          null,
          [
            "span",
            {
              "class": "token keyword"
            },
            "let"
          ],
          " config ",
          [
            "span",
            {
              "class": "token operator"
            },
            "="
          ],
          " ",
          [
            "span",
            {
              "class": "token keyword"
            },
            "new"
          ],
          " ",
          [
            "span",
            {
              "class": "token class-name"
            },
            "DatabaseConfiguration"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ";"
          ],
          "\n",
          [
            "span",
            {
              "class": "token keyword"
            },
            "let"
          ],
          " database ",
          [
            "span",
            {
              "class": "token operator"
            },
            "="
          ],
          " ",
          [
            "span",
            {
              "class": "token keyword"
            },
            "new"
          ],
          " ",
          [
            "span",
            {
              "class": "token class-name"
            },
            "Database"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"my-database\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          " config",
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ";"
          ]
        ]
      ],
      " "
    ],
    " ",
    [
      "p",
      null,
      "The database will be created on the device. Alternatively, the ",
      [
        "code",
        null,
        "Database(name: string, config: DatabaseConfiguration)"
      ],
      " initializer can be used to provide specific options in the ",
      [
        "a",
        {
          "href": "http://docs.couchbase.com/mobile/2.0/couchbase-lite-java/db022/com/couchbase/lite/DatabaseConfiguration.html"
        },
        [
          "code",
          null,
          "DatabaseConfiguration"
        ]
      ],
      " object such as the database directory."
    ],
    " ",
    [
      "h3",
      {
        "id": "loading-a-pre-built-database"
      },
      " ",
      [
        "a",
        {
          "href": "#loading-a-pre-built-database"
        },
        "Loading a pre-built Database"
      ],
      " "
    ],
    " ",
    [
      "p",
      null,
      "If your app needs to sync a lot of data initially, but that data is fairly static and won’t change much, it can be a lot more efficient to bundle a database in your application and install it on the first launch.\nEven if some of the content changes on the server after you create the app, the app’s first pull replication will bring the database up to date."
    ],
    " ",
    [
      "p",
      null,
      "To use a prebuilt database, you need to set up the database, build the database into your app bundle as a resource, and install the database during the initial launch.\nAfter your app launches, it needs to check whether the database exists.\nIf the database does not exist, the app should copy it from the app bundle using the ",
      [
        "a",
        {
          "href": "http://docs.couchbase.com/mobile/2.0/couchbase-lite-java/db022/com/couchbase/lite/Database.html#copy-java.io.File-java.lang.String-com.couchbase.lite.DatabaseConfiguration-"
        },
        [
          "code",
          null,
          "Database.copy(File path, String name, DatabaseConfiguration config)"
        ]
      ],
      " method as shown below."
    ],
    " ",
    [
      "docs-code",
      {
        "language": "typescript"
      },
      " ",
      [
        "pre",
        null,
        [
          "code",
          null,
          [
            "span",
            {
              "class": "token keyword"
            },
            "let"
          ],
          " config ",
          [
            "span",
            {
              "class": "token operator"
            },
            "="
          ],
          " ",
          [
            "span",
            {
              "class": "token keyword"
            },
            "new"
          ],
          " ",
          [
            "span",
            {
              "class": "token class-name"
            },
            "DatabaseConfiguration"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "getApplicationContext"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ";"
          ],
          "\nZipUtils",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "unzip"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "getAsset"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"replacedb/android200-sqlite.cblite2.zip\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          " ",
          [
            "span",
            {
              "class": "token function"
            },
            "getApplicationContext"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "getFilesDir"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ";"
          ],
          "\n",
          [
            "span",
            {
              "class": "token keyword"
            },
            "let"
          ],
          " path ",
          [
            "span",
            {
              "class": "token operator"
            },
            "="
          ],
          " ",
          [
            "span",
            {
              "class": "token keyword"
            },
            "new"
          ],
          " ",
          [
            "span",
            {
              "class": "token class-name"
            },
            "File"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "getApplicationContext"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "getFilesDir"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          " ",
          [
            "span",
            {
              "class": "token string"
            },
            "\"android-sqlite\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ";"
          ],
          "\n",
          [
            "span",
            {
              "class": "token keyword"
            },
            "try"
          ],
          " ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "{"
          ],
          "\n    Database",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "copy"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "path",
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          " ",
          [
            "span",
            {
              "class": "token string"
            },
            "\"travel-sample\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          " config",
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ";"
          ],
          "\n",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "}"
          ],
          " ",
          [
            "span",
            {
              "class": "token keyword"
            },
            "catch"
          ],
          " ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "e",
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          " ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "{"
          ],
          "\n    ",
          [
            "span",
            {
              "class": "token builtin"
            },
            "console"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "log"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"Could not load pre-built database\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ";"
          ],
          "\n",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "}"
          ]
        ]
      ],
      " "
    ],
    " ",
    [
      "h2",
      {
        "id": "document"
      },
      " ",
      [
        "a",
        {
          "href": "#document"
        },
        "Document"
      ],
      " "
    ],
    " ",
    [
      "p",
      null,
      "In Couchbase Lite, a document’s body takes the form of a JSON object — a collection of key/value pairs where the values can be different types of data such as numbers, strings, arrays or even nested objects.\nEvery document is identified by a document ID, which can be automatically generated (as a UUID) or specified programmatically;\nthe only constraints are that it must be unique within the database, and it can’t be changed."
    ],
    " ",
    [
      "h3",
      {
        "id": "initializers"
      },
      " ",
      [
        "a",
        {
          "href": "#initializers"
        },
        "Initializers"
      ],
      " "
    ],
    " ",
    [
      "p",
      null,
      "The following methods/initializers can be used:"
    ],
    " ",
    [
      "p",
      null,
      "The ",
      [
        "code",
        null,
        "MutableDocument()"
      ],
      " initializer can be used to create a new document where the document ID is randomly generated by the database."
    ],
    " ",
    [
      "p",
      null,
      "The ",
      [
        "code",
        null,
        "MutableDocument(withID: string)"
      ],
      " initializer can be used to create a new document with a specific ID."
    ],
    " ",
    [
      "p",
      null,
      "The ",
      [
        "code",
        null,
        "database.getDocument(id: string)"
      ],
      " method can be used to get a document.\nIf it doesn’t exist in the database, it will return ",
      [
        "code",
        null,
        "null"
      ],
      ".\nThis method can be used to check if a document with a given ID already exists in the database."
    ],
    " ",
    [
      "p",
      null,
      "The following code example creates a document and persists it to the database:"
    ],
    " ",
    [
      "docs-code",
      {
        "language": "typescript"
      },
      " ",
      [
        "pre",
        null,
        [
          "code",
          null,
          [
            "span",
            {
              "class": "token keyword"
            },
            "let"
          ],
          " newTask ",
          [
            "span",
            {
              "class": "token operator"
            },
            "="
          ],
          " ",
          [
            "span",
            {
              "class": "token keyword"
            },
            "new"
          ],
          " ",
          [
            "span",
            {
              "class": "token class-name"
            },
            "MutableDocument"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ";"
          ],
          "\nnewTask",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "setString"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"type\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          " ",
          [
            "span",
            {
              "class": "token string"
            },
            "\"task\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ";"
          ],
          "\nnewTask",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "setString"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"owner\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          " ",
          [
            "span",
            {
              "class": "token string"
            },
            "\"todo\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ";"
          ],
          "\nnewTask",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "setDate"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"createdAt\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          " ",
          [
            "span",
            {
              "class": "token keyword"
            },
            "new"
          ],
          " ",
          [
            "span",
            {
              "class": "token class-name"
            },
            "Date"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ";"
          ],
          "\n",
          [
            "span",
            {
              "class": "token keyword"
            },
            "try"
          ],
          " ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "{"
          ],
          "\n    database",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "save"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "newTask",
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ";"
          ],
          "\n",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "}"
          ],
          " ",
          [
            "span",
            {
              "class": "token keyword"
            },
            "catch"
          ],
          " ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "e",
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          " ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "{"
          ],
          "\n    ",
          [
            "span",
            {
              "class": "token builtin"
            },
            "console"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "log"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "e",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "toString"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ";"
          ],
          "\n",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "}"
          ]
        ]
      ],
      " "
    ],
    " ",
    [
      "p",
      null,
      "Changes to the document are persisted to the database when the ",
      [
        "code",
        null,
        "save"
      ],
      " method is called."
    ],
    " ",
    [
      "h3",
      {
        "id": "typed-accessors"
      },
      " ",
      [
        "a",
        {
          "href": "#typed-accessors"
        },
        "Typed Accessors"
      ],
      " "
    ],
    " ",
    [
      "p",
      null,
      "The ",
      [
        "code",
        null,
        "Document"
      ],
      " class offers a set of ",
      [
        "code",
        null,
        "property accessors"
      ],
      " for various scalar types, including boolean, integers, floating-point and strings.\nThese accessors take care of converting to/from JSON encoding, and make sure you get the type you’re expecting."
    ],
    " ",
    [
      "p",
      null,
      "In addition, as a convenience we offer ",
      [
        "code",
        null,
        "Date"
      ],
      " accessors.\nDates are a common data type, but JSON doesn’t natively support them, so the convention is to store them as strings in ISO-8601 format.\nThe following example sets the date on the ",
      [
        "code",
        null,
        "createdAt"
      ],
      " property and reads it back using the ",
      [
        "code",
        null,
        "document.getDate(String key)"
      ],
      " accessor method."
    ],
    " ",
    [
      "docs-code",
      {
        "language": "typescript"
      },
      " ",
      [
        "pre",
        null,
        [
          "code",
          null,
          "newTask",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "setValue"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"createdAt\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          " ",
          [
            "span",
            {
              "class": "token keyword"
            },
            "new"
          ],
          " ",
          [
            "span",
            {
              "class": "token class-name"
            },
            "Date"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ";"
          ],
          "\n",
          [
            "span",
            {
              "class": "token keyword"
            },
            "let"
          ],
          " date ",
          [
            "span",
            {
              "class": "token operator"
            },
            "="
          ],
          " newTask",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "getDate"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"createdAt\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ";"
          ]
        ]
      ],
      " "
    ],
    " ",
    [
      "p",
      null,
      "If the property doesn’t exist in the document it will return the default value for that getter method (0 for ",
      [
        "code",
        null,
        "getInt"
      ],
      ", 0.0 for ",
      [
        "code",
        null,
        "getFloat"
      ],
      " etc.)."
    ],
    " ",
    [
      "h3",
      {
        "id": "batch-operations"
      },
      " ",
      [
        "a",
        {
          "href": "#batch-operations"
        },
        "Batch Operations"
      ],
      " "
    ],
    " ",
    [
      "p",
      null,
      "If you need to make multiple changes to a database at once, it’s faster to group them together."
    ],
    " ",
    [
      "p",
      null,
      "The following example persists a few documents in batch:"
    ],
    " ",
    [
      "docs-code",
      {
        "language": "typescript"
      },
      " ",
      [
        "pre",
        null,
        [
          "code",
          null,
          [
            "span",
            {
              "class": "token keyword"
            },
            "await"
          ],
          " ",
          [
            "span",
            {
              "class": "token keyword"
            },
            "this"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          "database",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "inBatch"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          " ",
          [
            "span",
            {
              "class": "token operator"
            },
            "=>"
          ],
          " ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "{"
          ],
          "\n  ",
          [
            "span",
            {
              "class": "token keyword"
            },
            "for"
          ],
          " ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token keyword"
            },
            "let"
          ],
          " sdk ",
          [
            "span",
            {
              "class": "token keyword"
            },
            "of"
          ],
          " sdkDataToLoad",
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          " ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "{"
          ],
          "\n    ",
          [
            "span",
            {
              "class": "token keyword"
            },
            "let"
          ],
          " doc ",
          [
            "span",
            {
              "class": "token operator"
            },
            "="
          ],
          " ",
          [
            "span",
            {
              "class": "token keyword"
            },
            "new"
          ],
          " ",
          [
            "span",
            {
              "class": "token class-name"
            },
            "MutableDocument"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          "\n      ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "setNumber"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "'version'"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          " sdk",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          "version",
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          "\n      ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "setString"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "'type'"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          " sdk",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token keyword"
            },
            "type"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          "\n      ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "setString"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "'company'"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          " sdk",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          "company",
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ";"
          ],
          "\n\n    ",
          [
            "span",
            {
              "class": "token keyword"
            },
            "this"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          "database",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "save"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "doc",
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ";"
          ],
          "\n ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "}"
          ],
          "\n",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "}"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ";"
          ]
        ]
      ],
      " "
    ],
    " ",
    [
      "p",
      null,
      "At the ",
      [
        "strong",
        null,
        "local"
      ],
      " level this operation is still transactional: no other ",
      [
        "code",
        null,
        "Database"
      ],
      " instances, including ones managed by the replicator can make changes during the execution of the block, and other instances will not see partial changes. But Couchbase Mobile is a distributed system, and due to the way replication works, there’s no guarantee that Sync Gateway or other devices will receive your changes all at once."
    ],
    " ",
    [
      "h2",
      {
        "id": "blobs"
      },
      " ",
      [
        "a",
        {
          "href": "#blobs"
        },
        "Blobs"
      ],
      " "
    ],
    " ",
    [
      "p",
      null,
      "Used to store large data, such as images."
    ],
    " ",
    [
      "p",
      null,
      "The following code example adds a blob to the document under the ",
      [
        "code",
        null,
        "avatar"
      ],
      " property."
    ],
    " ",
    [
      "docs-code",
      {
        "language": "typescript"
      },
      " ",
      [
        "pre",
        null,
        [
          "code",
          null,
          [
            "span",
            {
              "class": "token keyword"
            },
            "let"
          ],
          " ",
          [
            "span",
            {
              "class": "token keyword"
            },
            "is"
          ],
          " ",
          [
            "span",
            {
              "class": "token operator"
            },
            "="
          ],
          " ",
          [
            "span",
            {
              "class": "token function"
            },
            "getAsset"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"avatar.jpg\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ";"
          ],
          "\n",
          [
            "span",
            {
              "class": "token keyword"
            },
            "try"
          ],
          " ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "{"
          ],
          "\n    ",
          [
            "span",
            {
              "class": "token keyword"
            },
            "let"
          ],
          " blob ",
          [
            "span",
            {
              "class": "token operator"
            },
            "="
          ],
          " ",
          [
            "span",
            {
              "class": "token keyword"
            },
            "new"
          ],
          " ",
          [
            "span",
            {
              "class": "token class-name"
            },
            "Blob"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"image/jpeg\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          " ",
          [
            "span",
            {
              "class": "token keyword"
            },
            "is"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ";"
          ],
          "\n    newTask",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "setBlob"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"avatar\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          " blob",
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ";"
          ],
          "\n    database",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "save"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "newTask",
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ";"
          ],
          "\n\n    ",
          [
            "span",
            {
              "class": "token keyword"
            },
            "let"
          ],
          " taskBlob ",
          [
            "span",
            {
              "class": "token operator"
            },
            "="
          ],
          " newTask",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "getBlob"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"avatar\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ";"
          ],
          "\n    ",
          [
            "span",
            {
              "class": "token keyword"
            },
            "let"
          ],
          " bytes ",
          [
            "span",
            {
              "class": "token operator"
            },
            "="
          ],
          " taskBlob",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "getContent"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ";"
          ],
          "\n",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "}"
          ],
          " ",
          [
            "span",
            {
              "class": "token keyword"
            },
            "catch"
          ],
          " ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "e",
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          " ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "{"
          ],
          "\n    ",
          [
            "span",
            {
              "class": "token builtin"
            },
            "console"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "log"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "e",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "toString"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ";"
          ],
          "\n",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "}"
          ],
          " ",
          [
            "span",
            {
              "class": "token keyword"
            },
            "finally"
          ],
          " ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "{"
          ],
          "\n    ",
          [
            "span",
            {
              "class": "token keyword"
            },
            "try"
          ],
          " ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "{"
          ],
          "\n        ",
          [
            "span",
            {
              "class": "token keyword"
            },
            "is"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "close"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ";"
          ],
          "\n    ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "}"
          ],
          " ",
          [
            "span",
            {
              "class": "token keyword"
            },
            "catch"
          ],
          " ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "IOException e",
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          " ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "{"
          ],
          "\n\n    ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "}"
          ],
          "\n",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "}"
          ]
        ]
      ],
      " "
    ],
    " ",
    [
      "p",
      null,
      "The ",
      [
        "code",
        null,
        "Blob"
      ],
      " API lets you access the contents as in-memory data (a ",
      [
        "code",
        null,
        "Data"
      ],
      " object) or as a ",
      [
        "code",
        null,
        "InputStream"
      ],
      ".\nIt also supports an optional ",
      [
        "code",
        null,
        "type"
      ],
      " property that by convention stores the MIME type of the contents."
    ],
    " ",
    [
      "p",
      null,
      "In the example above, \"image/jpeg\" is the MIME type and \"avatar\" is the key which references that ",
      [
        "code",
        null,
        "Blob"
      ],
      ".\nThat key can be used to retrieve the ",
      [
        "code",
        null,
        "Blob"
      ],
      " object at a later time."
    ],
    " ",
    [
      "p",
      null,
      "When a document is synchronized, the Couchbase Lite replicator will add an ",
      [
        "code",
        null,
        "_attachments"
      ],
      " dictionary to the document’s properties if it contains a blob.\nA random access name will be generated for each ",
      [
        "code",
        null,
        "Blob"
      ],
      " which is different to the \"avatar\" key that was used in the example above."
    ],
    " ",
    [
      "p",
      null,
      "A blob also has properties such as ",
      [
        "code",
        null,
        "\"digest\""
      ],
      " (a SHA-1 digest of the data), ",
      [
        "code",
        null,
        "\"length\""
      ],
      " (the length in bytes), and optionally ",
      [
        "code",
        null,
        "\"content_type\""
      ],
      " (the MIME type).\nThe data is not stored in the document, but in a separate content-addressable store, indexed by the digest."
    ],
    " ",
    [
      "h2",
      {
        "id": "query"
      },
      " ",
      [
        "a",
        {
          "href": "#query"
        },
        "Query"
      ],
      " "
    ],
    " ",
    [
      "p",
      null,
      "Database queries are based on expressions, of the form \"return __ from documents where __, ordered by __\", with semantics based on Couchbase’s N1QL query language."
    ],
    " ",
    [
      "p",
      null,
      "There are several parts to specifying a query:"
    ],
    " ",
    [
      "ul",
      null,
      " ",
      [
        "li",
        null,
        "SELECT: specifies the projection, which is the part of the document that is to be returned."
      ],
      " ",
      [
        "li",
        null,
        "FROM: specifies the database to query the documents from."
      ],
      " ",
      [
        "li",
        null,
        "JOIN: specifies the matching criteria in which to join multiple documents."
      ],
      " ",
      [
        "li",
        null,
        "WHERE: specifies the query criteria that the result must satisfy."
      ],
      " ",
      [
        "li",
        null,
        "GROUP BY: specifies the query criteria to group rows by."
      ],
      " ",
      [
        "li",
        null,
        "ORDER BY: specifies the query criteria to sort the rows in the result."
      ],
      " "
    ],
    " ",
    [
      "h3",
      {
        "id": "select-statement"
      },
      " ",
      [
        "a",
        {
          "href": "#select-statement"
        },
        "SELECT statement"
      ],
      " "
    ],
    " ",
    [
      "p",
      null,
      "With the SELECT statement, you can query and manipulate JSON data.\nWith projections, you retrieve just the fields that you need and not the entire document."
    ],
    " ",
    [
      "p",
      null,
      "A ",
      [
        "code",
        null,
        "SelectResult"
      ],
      " represents a single return value of the query statement.\nYou can specify a comma separated list of ",
      [
        "code",
        null,
        "SelectResult"
      ],
      " expressions in the select statement of your query.\nFor instance, the following select statement queries for the document ",
      [
        "code",
        null,
        "_id"
      ],
      " as well as the ",
      [
        "code",
        null,
        "type"
      ],
      " and ",
      [
        "code",
        null,
        "name"
      ],
      " properties of all documents in the database.\nIn the query result, we print the ",
      [
        "code",
        null,
        "_id"
      ],
      " and ",
      [
        "code",
        null,
        "name"
      ],
      " properties of each row using the property name getter method."
    ],
    " ",
    [
      "docs-code",
      {
        "language": "json"
      },
      " ",
      [
        "pre",
        null,
        [
          "code",
          null,
          [
            "span",
            {
              "class": "token punctuation"
            },
            "{"
          ],
          "\n    ",
          [
            "span",
            {
              "class": "token property"
            },
            "\"_id\""
          ],
          [
            "span",
            {
              "class": "token operator"
            },
            ":"
          ],
          " ",
          [
            "span",
            {
              "class": "token string"
            },
            "\"hotel123\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          "\n    ",
          [
            "span",
            {
              "class": "token property"
            },
            "\"type\""
          ],
          [
            "span",
            {
              "class": "token operator"
            },
            ":"
          ],
          " ",
          [
            "span",
            {
              "class": "token string"
            },
            "\"hotel\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          "\n    ",
          [
            "span",
            {
              "class": "token property"
            },
            "\"name\""
          ],
          [
            "span",
            {
              "class": "token operator"
            },
            ":"
          ],
          " ",
          [
            "span",
            {
              "class": "token string"
            },
            "\"Apple Droid\""
          ],
          "\n",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "}"
          ]
        ]
      ],
      " "
    ],
    " ",
    [
      "docs-code",
      {
        "language": "typescript"
      },
      " ",
      [
        "pre",
        null,
        [
          "code",
          null,
          [
            "span",
            {
              "class": "token keyword"
            },
            "let"
          ],
          " query ",
          [
            "span",
            {
              "class": "token operator"
            },
            "="
          ],
          " QueryBuilder\n    ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "select"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "SelectResult",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "expression"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "Meta",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          "id",
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          "\n        SelectResult",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "property"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"name\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          "\n        SelectResult",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "property"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"type\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          "\n    ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token keyword"
            },
            "from"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "DataSource",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "database"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "database",
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          "\n    ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "where"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "Expression",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "property"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"type\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "equalTo"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "Expression",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "string"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"hotel\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          "\n    ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "orderBy"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "Ordering",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "expression"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "Meta",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          "id",
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ";"
          ],
          "\n\n",
          [
            "span",
            {
              "class": "token keyword"
            },
            "try"
          ],
          " ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "{"
          ],
          "\n    ",
          [
            "span",
            {
              "class": "token keyword"
            },
            "const"
          ],
          " resultSet ",
          [
            "span",
            {
              "class": "token operator"
            },
            "="
          ],
          " ",
          [
            "span",
            {
              "class": "token keyword"
            },
            "await"
          ],
          " ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token keyword"
            },
            "await"
          ],
          " query",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "execute"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "allResults"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ";"
          ],
          "\n    ",
          [
            "span",
            {
              "class": "token keyword"
            },
            "for"
          ],
          " ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token keyword"
            },
            "let"
          ],
          " result ",
          [
            "span",
            {
              "class": "token keyword"
            },
            "of"
          ],
          " resultSet",
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          " ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "{"
          ],
          "\n        ",
          [
            "span",
            {
              "class": "token builtin"
            },
            "console"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "log"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"Sample\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          " String",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "format"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"hotel id -> %s\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          " result",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "getString"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"id\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ";"
          ],
          "\n        ",
          [
            "span",
            {
              "class": "token builtin"
            },
            "console"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "log"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"Sample\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          " String",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "format"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"hotel name -> %s\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          " result",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "getString"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"name\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ";"
          ],
          "\n    ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "}"
          ],
          "\n",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "}"
          ],
          " ",
          [
            "span",
            {
              "class": "token keyword"
            },
            "catch"
          ],
          " ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "e",
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          " ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "{"
          ],
          "\n    Log",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "e"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"Sample\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          " e",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "getLocalizedMessage"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ";"
          ],
          "\n",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "}"
          ]
        ]
      ],
      " "
    ],
    " ",
    [
      "p",
      null,
      "The ",
      [
        "code",
        null,
        "SelectResult.all()"
      ],
      " method can be used to query all the properties of a document.\nIn this case, the document in the result is embedded in a dictionary where the key is the database name.\nThe following snippet shows the same query using ",
      [
        "code",
        null,
        "SelectResult.all()"
      ],
      " and the result in JSON."
    ],
    " ",
    [
      "docs-code",
      {
        "language": "typescript"
      },
      " ",
      [
        "pre",
        null,
        [
          "code",
          null,
          [
            "span",
            {
              "class": "token keyword"
            },
            "let"
          ],
          " query ",
          [
            "span",
            {
              "class": "token operator"
            },
            "="
          ],
          " QueryBuilder\n    ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "select"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "SelectResult",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "all"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          "\n    ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token keyword"
            },
            "from"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "DataSource",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "database"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "database",
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          "\n    ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "where"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "Expression",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "property"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"type\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "equalTo"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "Expression",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "string"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"airline\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ";"
          ],
          "\n\n",
          [
            "span",
            {
              "class": "token keyword"
            },
            "const"
          ],
          " results ",
          [
            "span",
            {
              "class": "token operator"
            },
            "="
          ],
          " ",
          [
            "span",
            {
              "class": "token keyword"
            },
            "await"
          ],
          " ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token keyword"
            },
            "await"
          ],
          " query",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "execute"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "allResults"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ";"
          ],
          "\n\n",
          [
            "span",
            {
              "class": "token keyword"
            },
            "for"
          ],
          " ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token keyword"
            },
            "var"
          ],
          " key ",
          [
            "span",
            {
              "class": "token keyword"
            },
            "in"
          ],
          " results",
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          " ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "{"
          ],
          "\n    ",
          [
            "span",
            {
              "class": "token comment"
            },
            "// SelectResult.all() returns all properties, but puts them into this JSON format:"
          ],
          "\n    ",
          [
            "span",
            {
              "class": "token comment"
            },
            "// [ { \"*\": { version: \"2.0\", type: \"SDK\", company: \"Ionic\" } } ]"
          ],
          "\n    ",
          [
            "span",
            {
              "class": "token comment"
            },
            "// Couchbase can query multiple databases at once, so \"*\" represents just this single database."
          ],
          "\n    ",
          [
            "span",
            {
              "class": "token keyword"
            },
            "let"
          ],
          " singleResult ",
          [
            "span",
            {
              "class": "token operator"
            },
            "="
          ],
          " results",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "["
          ],
          "key",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "]"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "["
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"*\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "]"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ";"
          ],
          "\n\n    ",
          [
            "span",
            {
              "class": "token comment"
            },
            "// do something with the data"
          ],
          "\n",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "}"
          ]
        ]
      ],
      " "
    ],
    " ",
    [
      "docs-code",
      {
        "language": "json"
      },
      " ",
      [
        "pre",
        null,
        [
          "code",
          null,
          [
            "span",
            {
              "class": "token punctuation"
            },
            "["
          ],
          "\n    ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "{"
          ],
          "\n        ",
          [
            "span",
            {
              "class": "token property"
            },
            "\"*\""
          ],
          [
            "span",
            {
              "class": "token operator"
            },
            ":"
          ],
          " ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "{"
          ],
          "\n            ",
          [
            "span",
            {
              "class": "token property"
            },
            "\"callsign\""
          ],
          [
            "span",
            {
              "class": "token operator"
            },
            ":"
          ],
          " ",
          [
            "span",
            {
              "class": "token string"
            },
            "\"MILE-AIR\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          "\n            ",
          [
            "span",
            {
              "class": "token property"
            },
            "\"country\""
          ],
          [
            "span",
            {
              "class": "token operator"
            },
            ":"
          ],
          " ",
          [
            "span",
            {
              "class": "token string"
            },
            "\"United States\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          "\n            ",
          [
            "span",
            {
              "class": "token property"
            },
            "\"iata\""
          ],
          [
            "span",
            {
              "class": "token operator"
            },
            ":"
          ],
          " ",
          [
            "span",
            {
              "class": "token string"
            },
            "\"Q5\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          "\n            ",
          [
            "span",
            {
              "class": "token property"
            },
            "\"icao\""
          ],
          [
            "span",
            {
              "class": "token operator"
            },
            ":"
          ],
          " ",
          [
            "span",
            {
              "class": "token string"
            },
            "\"MLA\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          "\n            ",
          [
            "span",
            {
              "class": "token property"
            },
            "\"id\""
          ],
          [
            "span",
            {
              "class": "token operator"
            },
            ":"
          ],
          " ",
          [
            "span",
            {
              "class": "token number"
            },
            "10"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          "\n            ",
          [
            "span",
            {
              "class": "token property"
            },
            "\"name\""
          ],
          [
            "span",
            {
              "class": "token operator"
            },
            ":"
          ],
          " ",
          [
            "span",
            {
              "class": "token string"
            },
            "\"40-Mile Air\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          "\n            ",
          [
            "span",
            {
              "class": "token property"
            },
            "\"type\""
          ],
          [
            "span",
            {
              "class": "token operator"
            },
            ":"
          ],
          " ",
          [
            "span",
            {
              "class": "token string"
            },
            "\"airline\""
          ],
          "\n        ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "}"
          ],
          "\n    ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "}"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          "\n    ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "{"
          ],
          "\n        ",
          [
            "span",
            {
              "class": "token property"
            },
            "\"*\""
          ],
          [
            "span",
            {
              "class": "token operator"
            },
            ":"
          ],
          " ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "{"
          ],
          "\n            ",
          [
            "span",
            {
              "class": "token property"
            },
            "\"callsign\""
          ],
          [
            "span",
            {
              "class": "token operator"
            },
            ":"
          ],
          " ",
          [
            "span",
            {
              "class": "token string"
            },
            "\"TXW\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          "\n            ",
          [
            "span",
            {
              "class": "token property"
            },
            "\"country\""
          ],
          [
            "span",
            {
              "class": "token operator"
            },
            ":"
          ],
          " ",
          [
            "span",
            {
              "class": "token string"
            },
            "\"United States\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          "\n            ",
          [
            "span",
            {
              "class": "token property"
            },
            "\"iata\""
          ],
          [
            "span",
            {
              "class": "token operator"
            },
            ":"
          ],
          " ",
          [
            "span",
            {
              "class": "token string"
            },
            "\"TQ\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          "\n            ",
          [
            "span",
            {
              "class": "token property"
            },
            "\"icao\""
          ],
          [
            "span",
            {
              "class": "token operator"
            },
            ":"
          ],
          " ",
          [
            "span",
            {
              "class": "token string"
            },
            "\"TXW\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          "\n            ",
          [
            "span",
            {
              "class": "token property"
            },
            "\"id\""
          ],
          [
            "span",
            {
              "class": "token operator"
            },
            ":"
          ],
          " ",
          [
            "span",
            {
              "class": "token number"
            },
            "10123"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          "\n            ",
          [
            "span",
            {
              "class": "token property"
            },
            "\"name\""
          ],
          [
            "span",
            {
              "class": "token operator"
            },
            ":"
          ],
          " ",
          [
            "span",
            {
              "class": "token string"
            },
            "\"Texas Wings\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          "\n            ",
          [
            "span",
            {
              "class": "token property"
            },
            "\"type\""
          ],
          [
            "span",
            {
              "class": "token operator"
            },
            ":"
          ],
          " ",
          [
            "span",
            {
              "class": "token string"
            },
            "\"airline\""
          ],
          "\n        ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "}"
          ],
          "\n    ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "}"
          ],
          "\n",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "]"
          ]
        ]
      ],
      " "
    ],
    " ",
    [
      "h4",
      {
        "id": "retrieve-nested-document-objects"
      },
      " ",
      [
        "a",
        {
          "href": "#retrieve-nested-document-objects"
        },
        "Retrieve nested document objects"
      ],
      " "
    ],
    " ",
    [
      "docs-code",
      {
        "language": "json"
      },
      " ",
      [
        "pre",
        null,
        [
          "code",
          null,
          [
            "span",
            {
              "class": "token punctuation"
            },
            "{"
          ],
          "\n    ",
          [
            "span",
            {
              "class": "token property"
            },
            "\"_id\""
          ],
          [
            "span",
            {
              "class": "token operator"
            },
            ":"
          ],
          " ",
          [
            "span",
            {
              "class": "token string"
            },
            "\"airport123\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          "\n    ",
          [
            "span",
            {
              "class": "token property"
            },
            "\"type\""
          ],
          [
            "span",
            {
              "class": "token operator"
            },
            ":"
          ],
          " ",
          [
            "span",
            {
              "class": "token string"
            },
            "\"airport\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          "\n    ",
          [
            "span",
            {
              "class": "token property"
            },
            "\"country\""
          ],
          [
            "span",
            {
              "class": "token operator"
            },
            ":"
          ],
          " ",
          [
            "span",
            {
              "class": "token string"
            },
            "\"United States\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          "\n    ",
          [
            "span",
            {
              "class": "token property"
            },
            "\"geo\""
          ],
          [
            "span",
            {
              "class": "token operator"
            },
            ":"
          ],
          " ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "{"
          ],
          " ",
          [
            "span",
            {
              "class": "token property"
            },
            "\"altitude\""
          ],
          [
            "span",
            {
              "class": "token operator"
            },
            ":"
          ],
          " ",
          [
            "span",
            {
              "class": "token number"
            },
            "456"
          ],
          " ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "}"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          "\n    ",
          [
            "span",
            {
              "class": "token property"
            },
            "\"tz\""
          ],
          [
            "span",
            {
              "class": "token operator"
            },
            ":"
          ],
          " ",
          [
            "span",
            {
              "class": "token string"
            },
            "\"America/Anchorage\""
          ],
          "\n",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "}"
          ]
        ]
      ],
      " "
    ],
    " ",
    [
      "p",
      null,
      "In the above example, access nested objects like ",
      [
        "code",
        null,
        "altitude"
      ],
      " using periods (",
      [
        "code",
        null,
        "geo.altitude"
      ],
      "):"
    ],
    " ",
    [
      "docs-code",
      {
        "language": "typescript"
      },
      " ",
      [
        "pre",
        null,
        [
          "code",
          null,
          [
            "span",
            {
              "class": "token keyword"
            },
            "let"
          ],
          " query ",
          [
            "span",
            {
              "class": "token operator"
            },
            "="
          ],
          " QueryBuilder\n    ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "select"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "SelectResult",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "property"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"geo.altitude\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          "\n    ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token keyword"
            },
            "from"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "DataSource",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "database"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "database",
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ";"
          ]
        ]
      ],
      " "
    ],
    " ",
    [
      "h4",
      {
        "id": "retrieve-all-unique-values-for-one-column"
      },
      " ",
      [
        "a",
        {
          "href": "#retrieve-all-unique-values-for-one-column"
        },
        "Retrieve All Unique Values for One Column"
      ],
      " "
    ],
    " ",
    [
      "p",
      null,
      "Retrieve all unique values in the database for one specific column of data.\nUseful for populating ",
      [
        "a",
        {
          "href": "https://ionicframework.com/docs/api/select"
        },
        "dropdown controls"
      ],
      " as part of a search interface, for example."
    ],
    " ",
    [
      "docs-code",
      {
        "language": "typescript"
      },
      " ",
      [
        "pre",
        null,
        [
          "code",
          null,
          [
            "span",
            {
              "class": "token comment"
            },
            "// Find all unique Hotel names, for example"
          ],
          "\n",
          [
            "span",
            {
              "class": "token comment"
            },
            "// documentPropertyName = \"hotel\""
          ],
          "\n",
          [
            "span",
            {
              "class": "token keyword"
            },
            "public"
          ],
          " ",
          [
            "span",
            {
              "class": "token keyword"
            },
            "async"
          ],
          " ",
          [
            "span",
            {
              "class": "token function"
            },
            "getAllUniqueValues"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token parameter"
            },
            "documentPropertyName",
            [
              "span",
              {
                "class": "token operator"
              },
              ":"
            ],
            " ",
            [
              "span",
              {
                "class": "token builtin"
              },
              "string"
            ]
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          " ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "{"
          ],
          "\n    ",
          [
            "span",
            {
              "class": "token keyword"
            },
            "const"
          ],
          " query ",
          [
            "span",
            {
              "class": "token operator"
            },
            "="
          ],
          " QueryBuilder",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "selectDistinct"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "\n        SelectResult",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "property"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "documentPropertyName",
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          "\n      ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token keyword"
            },
            "from"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "DataSource",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "database"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token keyword"
            },
            "this"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          "database",
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          "\n      ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "orderBy"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "Ordering",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "property"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "documentPropertyName",
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "ascending"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ";"
          ],
          "\n\n    ",
          [
            "span",
            {
              "class": "token keyword"
            },
            "const"
          ],
          " results ",
          [
            "span",
            {
              "class": "token operator"
            },
            "="
          ],
          " ",
          [
            "span",
            {
              "class": "token keyword"
            },
            "await"
          ],
          " ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token keyword"
            },
            "await"
          ],
          " query",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "execute"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "allResults"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ";"
          ],
          "\n    ",
          [
            "span",
            {
              "class": "token keyword"
            },
            "return"
          ],
          " results",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "map"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token parameter"
            },
            "x"
          ],
          " ",
          [
            "span",
            {
              "class": "token operator"
            },
            "=>"
          ],
          " x",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "["
          ],
          "documentPropertyName",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "]"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ";"
          ],
          "\n",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "}"
          ]
        ]
      ],
      " "
    ],
    " ",
    [
      "h3",
      {
        "id": "where-statement"
      },
      " ",
      [
        "a",
        {
          "href": "#where-statement"
        },
        "WHERE Statement"
      ],
      " "
    ],
    " ",
    [
      "p",
      null,
      "Similar to SQL, you can use the where clause to filter the documents to be returned as part of the query.\nThe select statement takes in an ",
      [
        "code",
        null,
        "Expression"
      ],
      ".\nYou can chain any number of Expressions in order to implement sophisticated filtering capabilities."
    ],
    " ",
    [
      "h4",
      {
        "id": "comparison"
      },
      " ",
      [
        "a",
        {
          "href": "#comparison"
        },
        "Comparison"
      ],
      " "
    ],
    " ",
    [
      "p",
      null,
      "The ",
      [
        "a",
        {
          "href": "http://docs.couchbase.com/mobile/2.0/couchbase-lite-java/db022/com/couchbase/lite/Expression.html"
        },
        "comparison operators"
      ],
      " can be used in the WHERE statement to specify on which property to match documents.\nIn the example below, we use the ",
      [
        "code",
        null,
        "equalTo"
      ],
      " operator to query documents where the ",
      [
        "code",
        null,
        "type"
      ],
      " property equals \"hotel\"."
    ],
    " ",
    [
      "docs-code",
      {
        "language": "json"
      },
      " ",
      [
        "pre",
        null,
        [
          "code",
          null,
          [
            "span",
            {
              "class": "token punctuation"
            },
            "{"
          ],
          "\n    ",
          [
            "span",
            {
              "class": "token property"
            },
            "\"_id\""
          ],
          [
            "span",
            {
              "class": "token operator"
            },
            ":"
          ],
          " ",
          [
            "span",
            {
              "class": "token string"
            },
            "\"hotel123\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          "\n    ",
          [
            "span",
            {
              "class": "token property"
            },
            "\"type\""
          ],
          [
            "span",
            {
              "class": "token operator"
            },
            ":"
          ],
          " ",
          [
            "span",
            {
              "class": "token string"
            },
            "\"hotel\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          "\n    ",
          [
            "span",
            {
              "class": "token property"
            },
            "\"name\""
          ],
          [
            "span",
            {
              "class": "token operator"
            },
            ":"
          ],
          " ",
          [
            "span",
            {
              "class": "token string"
            },
            "\"Apple Droid\""
          ],
          "\n",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "}"
          ]
        ]
      ],
      " "
    ],
    " ",
    [
      "docs-code",
      {
        "language": "typescript"
      },
      " ",
      [
        "pre",
        null,
        [
          "code",
          null,
          [
            "span",
            {
              "class": "token keyword"
            },
            "let"
          ],
          " query ",
          [
            "span",
            {
              "class": "token operator"
            },
            "="
          ],
          " QueryBuilder\n    ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "select"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "SelectResult",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "all"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          "\n    ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token keyword"
            },
            "from"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "DataSource",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "database"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "database",
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          "\n    ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "where"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "Expression",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "property"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"type\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "equalTo"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "Expression",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "string"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"hotel\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          "\n    ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "limit"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "Expression",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "intValue"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token number"
            },
            "10"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ";"
          ],
          "\n",
          [
            "span",
            {
              "class": "token keyword"
            },
            "let"
          ],
          " rs ",
          [
            "span",
            {
              "class": "token operator"
            },
            "="
          ],
          " ",
          [
            "span",
            {
              "class": "token keyword"
            },
            "await"
          ],
          " ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token keyword"
            },
            "await"
          ],
          " query",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "execute"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "allResults"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ";"
          ],
          "\n",
          [
            "span",
            {
              "class": "token keyword"
            },
            "for"
          ],
          " ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token keyword"
            },
            "let"
          ],
          " result ",
          [
            "span",
            {
              "class": "token keyword"
            },
            "of"
          ],
          " rs",
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          " ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "{"
          ],
          "\n    ",
          [
            "span",
            {
              "class": "token keyword"
            },
            "let"
          ],
          " all ",
          [
            "span",
            {
              "class": "token operator"
            },
            "="
          ],
          " result",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "getDictionary"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token constant"
            },
            "DATABASE_NAME"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ";"
          ],
          "\n    ",
          [
            "span",
            {
              "class": "token builtin"
            },
            "console"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "log"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"Sample\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          " String",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "format"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"name -> %s\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          " all",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "getString"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"name\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ";"
          ],
          "\n    ",
          [
            "span",
            {
              "class": "token builtin"
            },
            "console"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "log"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"Sample\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          " String",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "format"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"type -> %s\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          " all",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "getString"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"type\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ";"
          ],
          "\n",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "}"
          ]
        ]
      ],
      " "
    ],
    " ",
    [
      "h4",
      {
        "id": "collection-operators"
      },
      " ",
      [
        "a",
        {
          "href": "#collection-operators"
        },
        "Collection Operators"
      ],
      " "
    ],
    " ",
    [
      "p",
      null,
      [
        "a",
        {
          "href": "http://docs.couchbase.com/mobile/2.0/couchbase-lite-java/db022/com/couchbase/lite/ArrayFunction.html"
        },
        "Collection operators"
      ],
      " are useful to check if a given value is present in an array."
    ],
    [
      "p",
      null
    ],
    " ",
    [
      "h5",
      {
        "id": "contains-operator"
      },
      " ",
      [
        "a",
        {
          "href": "#contains-operator"
        },
        "CONTAINS Operator"
      ],
      " "
    ],
    " ",
    [
      "p",
      null,
      "The following example uses the ",
      [
        "code",
        null,
        "Function.arrayContains"
      ],
      " to find documents whose ",
      [
        "code",
        null,
        "public_likes"
      ],
      " array property contain a value equal to \"Armani Langworth\"."
    ],
    " ",
    [
      "docs-code",
      {
        "language": "typescript"
      },
      " ",
      [
        "pre",
        null,
        [
          "code",
          null,
          [
            "span",
            {
              "class": "token punctuation"
            },
            "{"
          ],
          "\n    ",
          [
            "span",
            {
              "class": "token string"
            },
            "\"_id\""
          ],
          [
            "span",
            {
              "class": "token operator"
            },
            ":"
          ],
          " ",
          [
            "span",
            {
              "class": "token string"
            },
            "\"hotel123\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          "\n    ",
          [
            "span",
            {
              "class": "token string"
            },
            "\"name\""
          ],
          [
            "span",
            {
              "class": "token operator"
            },
            ":"
          ],
          " ",
          [
            "span",
            {
              "class": "token string"
            },
            "\"Apple Droid\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          "\n    ",
          [
            "span",
            {
              "class": "token string"
            },
            "\"public_likes\""
          ],
          [
            "span",
            {
              "class": "token operator"
            },
            ":"
          ],
          " ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "["
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"Armani Langworth\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          " ",
          [
            "span",
            {
              "class": "token string"
            },
            "\"Elfrieda Gutkowski\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          " ",
          [
            "span",
            {
              "class": "token string"
            },
            "\"Maureen Ruecker\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "]"
          ],
          "\n",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "}"
          ]
        ]
      ],
      " "
    ],
    " ",
    [
      "docs-code",
      {
        "language": "typescript"
      },
      " ",
      [
        "pre",
        null,
        [
          "code",
          null,
          [
            "span",
            {
              "class": "token keyword"
            },
            "let"
          ],
          " query ",
          [
            "span",
            {
              "class": "token operator"
            },
            "="
          ],
          " QueryBuilder\n    ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "select"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "SelectResult",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "expression"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "Meta",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          "id",
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          "\n        SelectResult",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "property"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"name\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          "\n        SelectResult",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "property"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"public_likes\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          "\n    ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token keyword"
            },
            "from"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "DataSource",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "database"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "database",
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          "\n    ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "where"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "Expression",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "property"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"type\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "equalTo"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "Expression",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "string"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"hotel\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          "\n        ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "and"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "ArrayFunction",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "contains"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "Expression",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "property"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"public_likes\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          " Expression",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "string"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"Armani Langworth\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ";"
          ],
          "\n",
          [
            "span",
            {
              "class": "token keyword"
            },
            "let"
          ],
          " rs ",
          [
            "span",
            {
              "class": "token operator"
            },
            "="
          ],
          " ",
          [
            "span",
            {
              "class": "token keyword"
            },
            "await"
          ],
          " ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token keyword"
            },
            "await"
          ],
          " query",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "execute"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "allResults"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ";"
          ],
          "\n",
          [
            "span",
            {
              "class": "token keyword"
            },
            "for"
          ],
          " ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token keyword"
            },
            "let"
          ],
          " result ",
          [
            "span",
            {
              "class": "token keyword"
            },
            "of"
          ],
          " rs",
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          "\n    ",
          [
            "span",
            {
              "class": "token builtin"
            },
            "console"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "log"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"Sample\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          " String",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "format"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"public_likes -> %s\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          " result",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "getArray"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"public_likes\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "toList"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ";"
          ]
        ]
      ],
      " "
    ],
    " ",
    [
      "h4",
      {
        "id": "in-operator"
      },
      " ",
      [
        "a",
        {
          "href": "#in-operator"
        },
        "IN Operator"
      ],
      " "
    ],
    " ",
    [
      "p",
      null,
      "The ",
      [
        "code",
        null,
        "IN"
      ],
      " operator is useful when you need to explicitly list out the values to test against.\nThe following example looks for documents whose ",
      [
        "code",
        null,
        "first"
      ],
      ", ",
      [
        "code",
        null,
        "last"
      ],
      " or ",
      [
        "code",
        null,
        "username"
      ],
      " property value equals \"Armani\"."
    ],
    " ",
    [
      "docs-code",
      {
        "language": "typescript"
      },
      " ",
      [
        "pre",
        null,
        [
          "code",
          null,
          [
            "span",
            {
              "class": "token keyword"
            },
            "let"
          ],
          " values ",
          [
            "span",
            {
              "class": "token operator"
            },
            "="
          ],
          " ",
          [
            "span",
            {
              "class": "token keyword"
            },
            "new"
          ],
          " ",
          [
            "span",
            {
              "class": "token class-name"
            },
            "Expression"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "["
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "]"
          ],
          " ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "{"
          ],
          "\n    Expression",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "property"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"first\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          "\n    Expression",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "property"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"last\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          "\n    Expression",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "property"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"username\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          "\n",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "}"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ";"
          ],
          "\n\n",
          [
            "span",
            {
              "class": "token keyword"
            },
            "let"
          ],
          " query ",
          [
            "span",
            {
              "class": "token operator"
            },
            "="
          ],
          " QueryBuilder",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "select"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "SelectResult",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "all"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          "\n    ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token keyword"
            },
            "from"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "DataSource",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "database"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "database",
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          "\n    ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "where"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "Expression",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "string"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"Armani\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token keyword"
            },
            "in"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "values",
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ";"
          ]
        ]
      ],
      " "
    ],
    " ",
    [
      "h4",
      {
        "id": "like-operator"
      },
      " ",
      [
        "a",
        {
          "href": "#like-operator"
        },
        "Like Operator"
      ],
      " "
    ],
    " ",
    [
      "p",
      null,
      "The ",
      [
        "a",
        {
          "href": "http://docs.couchbase.com/mobile/2.0/couchbase-lite-java/db022/com/couchbase/lite/Expression.html#like-com.couchbase.lite.Expression-"
        },
        [
          "code",
          null,
          "like"
        ]
      ],
      " operator can be used for string matching.\nIt is recommended to use the ",
      [
        "code",
        null,
        "like"
      ],
      " operator for case insensitive matches and the ",
      [
        "code",
        null,
        "regex"
      ],
      " operator (see below) for case sensitive matches."
    ],
    " ",
    [
      "p",
      null,
      "In the example below, we are looking for documents of type ",
      [
        "code",
        null,
        "landmark"
      ],
      " where the name property exactly matches the string \"Royal engineers museum\".\nNote that since ",
      [
        "code",
        null,
        "like"
      ],
      " does a case insensitive match, the following query will return \"landmark\" type documents with name matching \"Royal Engineers Museum\", \"royal engineers museum\", \"ROYAL ENGINEERS MUSEUM\" and so on."
    ],
    " ",
    [
      "docs-code",
      {
        "language": "typescript"
      },
      " ",
      [
        "pre",
        null,
        [
          "code",
          null,
          [
            "span",
            {
              "class": "token keyword"
            },
            "let"
          ],
          " query ",
          [
            "span",
            {
              "class": "token operator"
            },
            "="
          ],
          " QueryBuilder\n    ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "select"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "SelectResult",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "expression"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "Meta",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          "id",
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          "\n        SelectResult",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "property"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"country\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          "\n        SelectResult",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "property"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"name\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          "\n    ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token keyword"
            },
            "from"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "DataSource",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "database"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "database",
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          "\n    ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "where"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "Expression",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "property"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"type\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "equalTo"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "Expression",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "string"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"landmark\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          "\n        ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "and"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "Expression",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "property"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"name\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "like"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "Expression",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "string"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"Royal Engineers Museum\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ";"
          ],
          "\n",
          [
            "span",
            {
              "class": "token keyword"
            },
            "let"
          ],
          " rs ",
          [
            "span",
            {
              "class": "token operator"
            },
            "="
          ],
          " ",
          [
            "span",
            {
              "class": "token keyword"
            },
            "await"
          ],
          " ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token keyword"
            },
            "await"
          ],
          " query",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "execute"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "allResults"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ";"
          ],
          "\n",
          [
            "span",
            {
              "class": "token keyword"
            },
            "for"
          ],
          " ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token keyword"
            },
            "let"
          ],
          " result ",
          [
            "span",
            {
              "class": "token keyword"
            },
            "of"
          ],
          " rs",
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          " ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "{"
          ],
          "\n    ",
          [
            "span",
            {
              "class": "token builtin"
            },
            "console"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "log"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"Sample\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          " ",
          [
            "span",
            {
              "class": "token template-string"
            },
            [
              "span",
              {
                "class": "token template-punctuation string"
              },
              "`"
            ],
            [
              "span",
              {
                "class": "token string"
              },
              "name -> "
            ],
            [
              "span",
              {
                "class": "token interpolation"
              },
              [
                "span",
                {
                  "class": "token interpolation-punctuation punctuation"
                },
                "${"
              ],
              "result",
              [
                "span",
                {
                  "class": "token punctuation"
                },
                "."
              ],
              [
                "span",
                {
                  "class": "token function"
                },
                "getString"
              ],
              [
                "span",
                {
                  "class": "token punctuation"
                },
                "("
              ],
              [
                "span",
                {
                  "class": "token string"
                },
                "\"name\""
              ],
              [
                "span",
                {
                  "class": "token punctuation"
                },
                ")"
              ],
              [
                "span",
                {
                  "class": "token interpolation-punctuation punctuation"
                },
                "}"
              ]
            ],
            [
              "span",
              {
                "class": "token template-punctuation string"
              },
              "`"
            ]
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ";"
          ],
          "\n",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "}"
          ]
        ]
      ],
      " "
    ],
    " ",
    [
      "h4",
      {
        "id": "wildcard-match"
      },
      " ",
      [
        "a",
        {
          "href": "#wildcard-match"
        },
        "Wildcard Match"
      ],
      " "
    ],
    " ",
    [
      "p",
      null,
      "We can use ",
      [
        "code",
        null,
        "%"
      ],
      " sign within a ",
      [
        "code",
        null,
        "like"
      ],
      " expression to do a wildcard match against zero or more characters.\nUsing wildcards allows you to have some fuzziness in your search string."
    ],
    " ",
    [
      "p",
      null,
      "In the example below, we are looking for documents of ",
      [
        "code",
        null,
        "type"
      ],
      " \"landmark\" where the name property matches any string that begins with \"eng\" followed by zero or more characters, the letter \"e\", followed by zero or more characters.\nThe following query will return \"landmark\" type documents with name matching \"Engineers\", \"engine\", \"english egg\" , \"England Eagle\" and so on.\nNotice that the matches may span word boundaries."
    ],
    " ",
    [
      "docs-code",
      {
        "language": "typescript"
      },
      " ",
      [
        "pre",
        null,
        [
          "code",
          null,
          [
            "span",
            {
              "class": "token keyword"
            },
            "let"
          ],
          " query ",
          [
            "span",
            {
              "class": "token operator"
            },
            "="
          ],
          " QueryBuilder\n    ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "select"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "SelectResult",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "expression"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "Meta",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          "id",
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          "\n        SelectResult",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "property"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"country\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          "\n        SelectResult",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "property"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"name\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          "\n    ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token keyword"
            },
            "from"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "DataSource",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "database"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "database",
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          "\n    ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "where"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "Expression",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "property"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"type\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "equalTo"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "Expression",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "string"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"landmark\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          "\n        ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "and"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "Expression",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "property"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"name\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "like"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "Expression",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "string"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"Eng%e%\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ";"
          ],
          "\n",
          [
            "span",
            {
              "class": "token keyword"
            },
            "let"
          ],
          " rs ",
          [
            "span",
            {
              "class": "token operator"
            },
            "="
          ],
          " ",
          [
            "span",
            {
              "class": "token keyword"
            },
            "await"
          ],
          " ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token keyword"
            },
            "await"
          ],
          " query",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "execute"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "allResults"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ";"
          ],
          "\n",
          [
            "span",
            {
              "class": "token keyword"
            },
            "for"
          ],
          " ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token keyword"
            },
            "let"
          ],
          " result ",
          [
            "span",
            {
              "class": "token keyword"
            },
            "of"
          ],
          " rs",
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          "\n    ",
          [
            "span",
            {
              "class": "token builtin"
            },
            "console"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "log"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"Sample\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          " ",
          [
            "span",
            {
              "class": "token template-string"
            },
            [
              "span",
              {
                "class": "token template-punctuation string"
              },
              "`"
            ],
            [
              "span",
              {
                "class": "token string"
              },
              "name -> "
            ],
            [
              "span",
              {
                "class": "token interpolation"
              },
              [
                "span",
                {
                  "class": "token interpolation-punctuation punctuation"
                },
                "${"
              ],
              "result",
              [
                "span",
                {
                  "class": "token punctuation"
                },
                "."
              ],
              [
                "span",
                {
                  "class": "token function"
                },
                "getString"
              ],
              [
                "span",
                {
                  "class": "token punctuation"
                },
                "("
              ],
              [
                "span",
                {
                  "class": "token string"
                },
                "\"name\""
              ],
              [
                "span",
                {
                  "class": "token punctuation"
                },
                ")"
              ],
              [
                "span",
                {
                  "class": "token interpolation-punctuation punctuation"
                },
                "}"
              ]
            ],
            [
              "span",
              {
                "class": "token template-punctuation string"
              },
              "`"
            ]
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ";"
          ]
        ]
      ],
      " "
    ],
    " ",
    [
      "p",
      null,
      "A reusable function can easily be created that formats an expression, usable in a Where clause, for fuzzy searching:"
    ],
    " ",
    [
      "docs-code",
      {
        "language": "typescript"
      },
      " ",
      [
        "pre",
        null,
        [
          "code",
          null,
          [
            "span",
            {
              "class": "token comment"
            },
            "// Specify a reserved word"
          ],
          "\n",
          [
            "span",
            {
              "class": "token keyword"
            },
            "private"
          ],
          " ",
          [
            "span",
            {
              "class": "token constant"
            },
            "EMPTY_PLACEHOLDER"
          ],
          " ",
          [
            "span",
            {
              "class": "token operator"
            },
            "="
          ],
          " ",
          [
            "span",
            {
              "class": "token string"
            },
            "\"Any\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ";"
          ],
          "\n\n",
          [
            "span",
            {
              "class": "token keyword"
            },
            "private"
          ],
          " ",
          [
            "span",
            {
              "class": "token function"
            },
            "formatWildcardExpression"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token parameter"
            },
            "propValue"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          " ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "{"
          ],
          "\n    ",
          [
            "span",
            {
              "class": "token keyword"
            },
            "return"
          ],
          " Expression",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "string"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "\n        ",
          [
            "span",
            {
              "class": "token template-string"
            },
            [
              "span",
              {
                "class": "token template-punctuation string"
              },
              "`"
            ],
            [
              "span",
              {
                "class": "token string"
              },
              "%"
            ],
            [
              "span",
              {
                "class": "token interpolation"
              },
              [
                "span",
                {
                  "class": "token interpolation-punctuation punctuation"
                },
                "${"
              ],
              "propValue ",
              [
                "span",
                {
                  "class": "token operator"
                },
                "==="
              ],
              " ",
              [
                "span",
                {
                  "class": "token keyword"
                },
                "this"
              ],
              [
                "span",
                {
                  "class": "token punctuation"
                },
                "."
              ],
              [
                "span",
                {
                  "class": "token constant"
                },
                "EMPTY_PLACEHOLDER"
              ],
              " ",
              [
                "span",
                {
                  "class": "token operator"
                },
                "?"
              ],
              " ",
              [
                "span",
                {
                  "class": "token string"
                },
                "\"\""
              ],
              " ",
              [
                "span",
                {
                  "class": "token operator"
                },
                ":"
              ],
              " propValue",
              [
                "span",
                {
                  "class": "token interpolation-punctuation punctuation"
                },
                "}"
              ]
            ],
            [
              "span",
              {
                "class": "token string"
              },
              "%"
            ],
            [
              "span",
              {
                "class": "token template-punctuation string"
              },
              "`"
            ]
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ";"
          ],
          "\n",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "}"
          ]
        ]
      ],
      " "
    ],
    " ",
    [
      "docs-code",
      {
        "language": "typescript"
      },
      " ",
      [
        "pre",
        null,
        [
          "code",
          null,
          [
            "span",
            {
              "class": "token comment"
            },
            "// snippet:"
          ],
          "\n",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "where"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "Expression",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "property"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"office\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "like"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "\n    ",
          [
            "span",
            {
              "class": "token keyword"
            },
            "this"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "formatWildcardExpression"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "office",
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ]
        ]
      ],
      " "
    ],
    " ",
    [
      "h4",
      {
        "id": "wildcard-character-match"
      },
      " ",
      [
        "a",
        {
          "href": "#wildcard-character-match"
        },
        "Wildcard Character Match"
      ],
      " "
    ],
    " ",
    [
      "p",
      null,
      "We can use ",
      [
        "code",
        null,
        "_"
      ],
      " sign within a like expression to do a wildcard match against a single character."
    ],
    " ",
    [
      "p",
      null,
      "In the example below, we are looking for documents of type \"landmark\" where the ",
      [
        "code",
        null,
        "name"
      ],
      " property matches any string that begins with \"eng\" followed by exactly 4 wildcard characters and ending in the letter \"r\".\nThe following query will return \"landmark\" ",
      [
        "code",
        null,
        "type"
      ],
      " documents with the ",
      [
        "code",
        null,
        "name"
      ],
      " matching \"Engineer\", \"engineer\" and so on."
    ],
    " ",
    [
      "docs-code",
      {
        "language": "typescript"
      },
      " ",
      [
        "pre",
        null,
        [
          "code",
          null,
          [
            "span",
            {
              "class": "token keyword"
            },
            "let"
          ],
          " query ",
          [
            "span",
            {
              "class": "token operator"
            },
            "="
          ],
          " QueryBuilder\n    ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "select"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "SelectResult",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "expression"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "Meta",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          "id",
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          "\n        SelectResult",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "property"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"country\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          "\n        SelectResult",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "property"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"name\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          "\n    ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token keyword"
            },
            "from"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "DataSource",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "database"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "database",
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          "\n    ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "where"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "Expression",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "property"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"type\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "equalTo"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "Expression",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "string"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"landmark\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          "\n        ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "and"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "Expression",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "property"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"name\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "like"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "Expression",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "string"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"Eng____r\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ";"
          ],
          "\n",
          [
            "span",
            {
              "class": "token keyword"
            },
            "let"
          ],
          " rs ",
          [
            "span",
            {
              "class": "token operator"
            },
            "="
          ],
          " ",
          [
            "span",
            {
              "class": "token keyword"
            },
            "await"
          ],
          " ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token keyword"
            },
            "await"
          ],
          " query",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "execute"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "allResults"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ";"
          ],
          "\n",
          [
            "span",
            {
              "class": "token keyword"
            },
            "for"
          ],
          " ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token keyword"
            },
            "let"
          ],
          " result ",
          [
            "span",
            {
              "class": "token keyword"
            },
            "of"
          ],
          " rs",
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          "\n    ",
          [
            "span",
            {
              "class": "token builtin"
            },
            "console"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "log"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"Sample\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          " ",
          [
            "span",
            {
              "class": "token template-string"
            },
            [
              "span",
              {
                "class": "token template-punctuation string"
              },
              "`"
            ],
            [
              "span",
              {
                "class": "token string"
              },
              "name -> "
            ],
            [
              "span",
              {
                "class": "token interpolation"
              },
              [
                "span",
                {
                  "class": "token interpolation-punctuation punctuation"
                },
                "${"
              ],
              "result",
              [
                "span",
                {
                  "class": "token punctuation"
                },
                "."
              ],
              [
                "span",
                {
                  "class": "token function"
                },
                "getString"
              ],
              [
                "span",
                {
                  "class": "token punctuation"
                },
                "("
              ],
              [
                "span",
                {
                  "class": "token string"
                },
                "\"name\""
              ],
              [
                "span",
                {
                  "class": "token punctuation"
                },
                ")"
              ],
              [
                "span",
                {
                  "class": "token interpolation-punctuation punctuation"
                },
                "}"
              ]
            ],
            [
              "span",
              {
                "class": "token template-punctuation string"
              },
              "`"
            ]
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ";"
          ]
        ]
      ],
      " "
    ],
    " ",
    [
      "h4",
      {
        "id": "regex-operator"
      },
      " ",
      [
        "a",
        {
          "href": "#regex-operator"
        },
        "Regex Operator"
      ],
      " "
    ],
    " ",
    [
      "p",
      null,
      "The ",
      [
        "code",
        null,
        "regex"
      ],
      " expression can be used for case sensitive matches.\nSimilar to wildcard ",
      [
        "code",
        null,
        "like"
      ],
      " expressions, ",
      [
        "code",
        null,
        "regex"
      ],
      " expressions based pattern matching allow you to have some fuzziness in your search string."
    ],
    " ",
    [
      "p",
      null,
      "In the example below, we are looking for documents of ",
      [
        "code",
        null,
        "type"
      ],
      " \"landmark\" where the name property matches any string (on word boundaries) that begins with \"eng\" followed by exactly 4 wildcard characters and ending in the letter \"r\".\nThe following query will return \"landmark\" type documents with name matching \"Engine\", \"engine\" and so on.\nNote that the ",
      [
        "code",
        null,
        "\\b"
      ],
      " specifies that the match must occur on word boundaries."
    ],
    " ",
    [
      "docs-code",
      {
        "language": "typescript"
      },
      " ",
      [
        "pre",
        null,
        [
          "code",
          null,
          [
            "span",
            {
              "class": "token keyword"
            },
            "let"
          ],
          " query ",
          [
            "span",
            {
              "class": "token operator"
            },
            "="
          ],
          " QueryBuilder\n    ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "select"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "SelectResult",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "expression"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "Meta",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          "id",
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          "\n        SelectResult",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "property"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"country\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          "\n        SelectResult",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "property"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"name\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          "\n    ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token keyword"
            },
            "from"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "DataSource",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "database"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "database",
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          "\n    ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "where"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "Expression",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "property"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"type\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "equalTo"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "Expression",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "string"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"landmark\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          "\n        ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "and"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "Expression",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "property"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"name\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "regex"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "Expression",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "string"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"\\\\bEng.*r\\\\b\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ";"
          ],
          "\n",
          [
            "span",
            {
              "class": "token keyword"
            },
            "let"
          ],
          " rs ",
          [
            "span",
            {
              "class": "token operator"
            },
            "="
          ],
          " ",
          [
            "span",
            {
              "class": "token keyword"
            },
            "await"
          ],
          " ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token keyword"
            },
            "await"
          ],
          " query",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "execute"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "allResults"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ";"
          ],
          "\n",
          [
            "span",
            {
              "class": "token keyword"
            },
            "for"
          ],
          " ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token keyword"
            },
            "let"
          ],
          " result ",
          [
            "span",
            {
              "class": "token keyword"
            },
            "of"
          ],
          " rs",
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          "\n    ",
          [
            "span",
            {
              "class": "token builtin"
            },
            "console"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "log"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"Sample\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          " ",
          [
            "span",
            {
              "class": "token template-string"
            },
            [
              "span",
              {
                "class": "token template-punctuation string"
              },
              "`"
            ],
            [
              "span",
              {
                "class": "token string"
              },
              "name -> "
            ],
            [
              "span",
              {
                "class": "token interpolation"
              },
              [
                "span",
                {
                  "class": "token interpolation-punctuation punctuation"
                },
                "${"
              ],
              "result",
              [
                "span",
                {
                  "class": "token punctuation"
                },
                "."
              ],
              [
                "span",
                {
                  "class": "token function"
                },
                "getString"
              ],
              [
                "span",
                {
                  "class": "token punctuation"
                },
                "("
              ],
              [
                "span",
                {
                  "class": "token string"
                },
                "\"name\""
              ],
              [
                "span",
                {
                  "class": "token punctuation"
                },
                ")"
              ],
              [
                "span",
                {
                  "class": "token interpolation-punctuation punctuation"
                },
                "}"
              ]
            ],
            [
              "span",
              {
                "class": "token template-punctuation string"
              },
              "`"
            ]
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ";"
          ]
        ]
      ],
      " "
    ],
    " ",
    [
      "h3",
      {
        "id": "join-statement"
      },
      " ",
      [
        "a",
        {
          "href": "#join-statement"
        },
        "JOIN Statement"
      ],
      " "
    ],
    " ",
    [
      "p",
      null,
      "The JOIN clause enables you to create new input objects by combining two or more source objects."
    ],
    " ",
    [
      "p",
      null,
      "The following example uses a JOIN clause to find the airline details which have routes that start from RIX.\nThis example JOINS the document of type \"route\" with documents of type \"airline\" using the document ID (",
      [
        "code",
        null,
        "_id"
      ],
      ") on the \"airline\" document and ",
      [
        "code",
        null,
        "airlineid"
      ],
      " on the \"route\" document."
    ],
    " ",
    [
      "docs-code",
      {
        "language": "typescript"
      },
      " ",
      [
        "pre",
        null,
        [
          "code",
          null,
          [
            "span",
            {
              "class": "token keyword"
            },
            "let"
          ],
          " query ",
          [
            "span",
            {
              "class": "token operator"
            },
            "="
          ],
          " QueryBuilder",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "select"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "\n    SelectResult",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "expression"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "Expression",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "property"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"name\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token keyword"
            },
            "from"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"airline\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          "\n    SelectResult",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "expression"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "Expression",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "property"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"callsign\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token keyword"
            },
            "from"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"airline\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          "\n    SelectResult",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "expression"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "Expression",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "property"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"destinationairport\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token keyword"
            },
            "from"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"route\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          "\n    SelectResult",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "expression"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "Expression",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "property"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"stops\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token keyword"
            },
            "from"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"route\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          "\n    SelectResult",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "expression"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "Expression",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "property"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"airline\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token keyword"
            },
            "from"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"route\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          "\n    ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token keyword"
            },
            "from"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "DataSource",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "database"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "database",
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token keyword"
            },
            "as"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"airline\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          "\n    ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "join"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "Join",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "join"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "DataSource",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "database"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "database",
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token keyword"
            },
            "as"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"route\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          "\n        ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "on"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "Meta",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          "id",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token keyword"
            },
            "from"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"airline\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "equalTo"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "Expression",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "property"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"airlineid\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token keyword"
            },
            "from"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"route\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          "\n    ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "where"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "Expression",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "property"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"type\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token keyword"
            },
            "from"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"route\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "equalTo"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "Expression",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "string"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"route\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          "\n        ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "and"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "Expression",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "property"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"type\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token keyword"
            },
            "from"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"airline\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "equalTo"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "Expression",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "string"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"airline\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          "\n        ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "and"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "Expression",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "property"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"sourceairport\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token keyword"
            },
            "from"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"route\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "equalTo"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "Expression",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "string"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"RIX\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ";"
          ],
          "\n",
          [
            "span",
            {
              "class": "token keyword"
            },
            "let"
          ],
          " rs ",
          [
            "span",
            {
              "class": "token operator"
            },
            "="
          ],
          " ",
          [
            "span",
            {
              "class": "token keyword"
            },
            "await"
          ],
          " ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token keyword"
            },
            "await"
          ],
          " query",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "execute"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "allResults"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ";"
          ],
          "\n",
          [
            "span",
            {
              "class": "token keyword"
            },
            "for"
          ],
          " ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token keyword"
            },
            "let"
          ],
          " result ",
          [
            "span",
            {
              "class": "token keyword"
            },
            "of"
          ],
          " rs",
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          "\n    ",
          [
            "span",
            {
              "class": "token builtin"
            },
            "console"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "log"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"Sample\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          " String",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "format"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"%s\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          " result",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "toMap"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "toString"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ";"
          ]
        ]
      ],
      " "
    ],
    " ",
    [
      "h3",
      {
        "id": "group-by-statement"
      },
      " ",
      [
        "a",
        {
          "href": "#group-by-statement"
        },
        "GROUP BY statement"
      ],
      " "
    ],
    " ",
    [
      "p",
      null,
      "You can perform further processing on the data in your result set before the final projection is generated.\nThe following example looks for the number of airports at an altitude of 300 ft or higher and groups the results by country and timezone."
    ],
    " ",
    [
      "docs-code",
      {
        "language": "json"
      },
      " ",
      [
        "pre",
        null,
        [
          "code",
          null,
          [
            "span",
            {
              "class": "token punctuation"
            },
            "{"
          ],
          "\n    ",
          [
            "span",
            {
              "class": "token property"
            },
            "\"_id\""
          ],
          [
            "span",
            {
              "class": "token operator"
            },
            ":"
          ],
          " ",
          [
            "span",
            {
              "class": "token string"
            },
            "\"airport123\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          "\n    ",
          [
            "span",
            {
              "class": "token property"
            },
            "\"type\""
          ],
          [
            "span",
            {
              "class": "token operator"
            },
            ":"
          ],
          " ",
          [
            "span",
            {
              "class": "token string"
            },
            "\"airport\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          "\n    ",
          [
            "span",
            {
              "class": "token property"
            },
            "\"country\""
          ],
          [
            "span",
            {
              "class": "token operator"
            },
            ":"
          ],
          " ",
          [
            "span",
            {
              "class": "token string"
            },
            "\"United States\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          "\n    ",
          [
            "span",
            {
              "class": "token property"
            },
            "\"geo\""
          ],
          [
            "span",
            {
              "class": "token operator"
            },
            ":"
          ],
          " ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "{"
          ],
          " ",
          [
            "span",
            {
              "class": "token property"
            },
            "\"alt\""
          ],
          [
            "span",
            {
              "class": "token operator"
            },
            ":"
          ],
          " ",
          [
            "span",
            {
              "class": "token number"
            },
            "456"
          ],
          " ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "}"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          "\n    ",
          [
            "span",
            {
              "class": "token property"
            },
            "\"tz\""
          ],
          [
            "span",
            {
              "class": "token operator"
            },
            ":"
          ],
          " ",
          [
            "span",
            {
              "class": "token string"
            },
            "\"America/Anchorage\""
          ],
          "\n",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "}"
          ]
        ]
      ],
      " "
    ],
    " ",
    [
      "docs-code",
      {
        "language": "typescript"
      },
      " ",
      [
        "pre",
        null,
        [
          "code",
          null,
          [
            "span",
            {
              "class": "token keyword"
            },
            "let"
          ],
          " query ",
          [
            "span",
            {
              "class": "token operator"
            },
            "="
          ],
          " QueryBuilder",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "select"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "\n    SelectResult",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "expression"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token builtin"
            },
            "Function"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "count"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "Expression",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "string"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"*\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          "\n    SelectResult",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "property"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"country\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          "\n    SelectResult",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "property"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"tz\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          "\n    ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token keyword"
            },
            "from"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "DataSource",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "database"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "database",
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          "\n    ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "where"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "Expression",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "property"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"type\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "equalTo"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "Expression",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "string"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"airport\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          "\n        ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "and"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "Expression",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "property"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"geo.alt\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "greaterThanOrEqualTo"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "Expression",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "intValue"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token number"
            },
            "300"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          "\n    ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "groupBy"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "Expression",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "property"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"country\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          "\n        Expression",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "property"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"tz\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          "\n    ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "orderBy"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "Ordering",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "expression"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token builtin"
            },
            "Function"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "count"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "Expression",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "string"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"*\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "descending"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ";"
          ],
          "\n",
          [
            "span",
            {
              "class": "token keyword"
            },
            "let"
          ],
          " rs ",
          [
            "span",
            {
              "class": "token operator"
            },
            "="
          ],
          " ",
          [
            "span",
            {
              "class": "token keyword"
            },
            "await"
          ],
          " ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token keyword"
            },
            "await"
          ],
          " query",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "execute"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "allResults"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ";"
          ],
          "\n",
          [
            "span",
            {
              "class": "token keyword"
            },
            "for"
          ],
          " ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token keyword"
            },
            "let"
          ],
          " result ",
          [
            "span",
            {
              "class": "token keyword"
            },
            "of"
          ],
          " rs",
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          "\n    ",
          [
            "span",
            {
              "class": "token builtin"
            },
            "console"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "log"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"Sample\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          "\n        String",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "format"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"There are %d airports on the %s timezone located in %s and above 300ft\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          "\n            result",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "getInt"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"$1\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          "\n            result",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "getString"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"tz\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          "\n            result",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "getString"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"country\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ";"
          ]
        ]
      ],
      " "
    ],
    " ",
    [
      "docs-code",
      {
        "language": "null"
      },
      " ",
      [
        "pre",
        null,
        [
          "code",
          null,
          "There are 138 airports on the Europe/Paris timezone located in France and above 300 ft\nThere are 29 airports on the Europe/London timezone located in United Kingdom and above 300 ft\nThere are 50 airports on the America/Anchorage timezone located in United States and above 300 ft\nThere are 279 airports on the America/Chicago timezone located in United States and above 300 ft\nThere are 123 airports on the America/Denver timezone located in United States and above 300 ft"
        ]
      ],
      " "
    ],
    " ",
    [
      "h3",
      {
        "id": "order-by-statement"
      },
      " ",
      [
        "a",
        {
          "href": "#order-by-statement"
        },
        "ORDER BY statement"
      ],
      " "
    ],
    " ",
    [
      "p",
      null,
      "It is possible to sort the results of a query based on a given expression result.\nThe example below returns documents of type equal to \"hotel\" sorted in ascending order by the value of the title property."
    ],
    " ",
    [
      "docs-code",
      {
        "language": "typescript"
      },
      " ",
      [
        "pre",
        null,
        [
          "code",
          null,
          [
            "span",
            {
              "class": "token keyword"
            },
            "let"
          ],
          " query ",
          [
            "span",
            {
              "class": "token operator"
            },
            "="
          ],
          " QueryBuilder\n    ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "select"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "SelectResult",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "expression"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "Meta",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          "id",
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          "\n        SelectResult",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "property"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"name\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          "\n    ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token keyword"
            },
            "from"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "DataSource",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "database"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "database",
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          "\n    ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "where"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "Expression",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "property"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"type\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "equalTo"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "Expression",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "string"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"hotel\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          "\n    ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "orderBy"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "Ordering",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "property"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"name\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "ascending"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          "\n    ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "limit"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "Expression",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "intValue"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token number"
            },
            "10"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ";"
          ],
          "\n",
          [
            "span",
            {
              "class": "token keyword"
            },
            "let"
          ],
          " rs ",
          [
            "span",
            {
              "class": "token operator"
            },
            "="
          ],
          " ",
          [
            "span",
            {
              "class": "token keyword"
            },
            "await"
          ],
          " ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token keyword"
            },
            "await"
          ],
          " query",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "execute"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "allResults"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ";"
          ],
          "\n",
          [
            "span",
            {
              "class": "token keyword"
            },
            "for"
          ],
          " ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token keyword"
            },
            "let"
          ],
          " result ",
          [
            "span",
            {
              "class": "token keyword"
            },
            "of"
          ],
          " rs",
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          "\n    ",
          [
            "span",
            {
              "class": "token builtin"
            },
            "console"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "log"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"Sample\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          " result",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "toMap"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ";"
          ]
        ]
      ],
      " "
    ],
    " ",
    [
      "docs-code",
      {
        "language": "null"
      },
      " ",
      [
        "pre",
        null,
        [
          "code",
          null,
          "Aberdyfi\nAchiltibuie\nAltrincham\nAmbleside\nAnnan\nArdèche\nArmagh\nAvignon"
        ]
      ],
      " "
    ],
    " ",
    [
      "h2",
      {
        "id": "indexing"
      },
      " ",
      [
        "a",
        {
          "href": "#indexing"
        },
        "Indexing"
      ],
      " "
    ],
    " ",
    [
      "p",
      null,
      "Creating indexes can speed up the performance of queries.\nWhile indexes make queries faster, they also make writes slightly slower, and the Couchbase Lite database file slightly larger.\nAs such, it is best to only create indexes when you need to optimize a specific case for better query performance."
    ],
    " ",
    [
      "p",
      null,
      "The following example creates a new index for the ",
      [
        "code",
        null,
        "type"
      ],
      " and ",
      [
        "code",
        null,
        "name"
      ],
      " properties."
    ],
    " ",
    [
      "docs-code",
      {
        "language": "json"
      },
      " ",
      [
        "pre",
        null,
        [
          "code",
          null,
          [
            "span",
            {
              "class": "token punctuation"
            },
            "{"
          ],
          "\n  ",
          [
            "span",
            {
              "class": "token property"
            },
            "\"_id\""
          ],
          [
            "span",
            {
              "class": "token operator"
            },
            ":"
          ],
          " ",
          [
            "span",
            {
              "class": "token string"
            },
            "\"hotel123\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          "\n  ",
          [
            "span",
            {
              "class": "token property"
            },
            "\"type\""
          ],
          [
            "span",
            {
              "class": "token operator"
            },
            ":"
          ],
          " ",
          [
            "span",
            {
              "class": "token string"
            },
            "\"hotel\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          "\n  ",
          [
            "span",
            {
              "class": "token property"
            },
            "\"name\""
          ],
          [
            "span",
            {
              "class": "token operator"
            },
            ":"
          ],
          " ",
          [
            "span",
            {
              "class": "token string"
            },
            "\"Apple Droid\""
          ],
          "\n",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "}"
          ]
        ]
      ],
      " "
    ],
    " ",
    [
      "docs-code",
      {
        "language": "typescript"
      },
      " ",
      [
        "pre",
        null,
        [
          "code",
          null,
          "database",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "createIndex"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"TypeNameIndex\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          "\n    IndexBuilder",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "valueIndex"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "ValueIndexItem",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "property"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"type\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          "\n        ValueIndexItem",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "property"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"name\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ";"
          ]
        ]
      ],
      " "
    ],
    " ",
    [
      "p",
      null,
      "If there are multiple expressions, the first one will be the primary key, the second the secondary key, etc."
    ],
    " ",
    [
      "p",
      null,
      "Note: Every index has to be updated whenever a document is updated, so too many indexes can hurt performance.\nThus, good performance depends on designing and creating the ",
      [
        "em",
        null,
        "right"
      ],
      " indexes to go along with your queries."
    ],
    " ",
    [
      "h2",
      {
        "id": "full-text-search"
      },
      " ",
      [
        "a",
        {
          "href": "#full-text-search"
        },
        "Full-Text Search"
      ],
      " "
    ],
    " ",
    [
      "p",
      null,
      "To run a full-text search (FTS) query, you must have created a full-text index on the expression being matched.\nUnlike regular queries, the index is not optional.\nThe following example inserts documents and creates an FTS index on the ",
      [
        "code",
        null,
        "name"
      ],
      " property."
    ],
    " ",
    [
      "docs-code",
      {
        "language": "typescript"
      },
      " ",
      [
        "pre",
        null,
        [
          "code",
          null,
          "database",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "createIndex"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"nameFTSIndex\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          " IndexBuilder",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "fullTextIndex"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "FullTextIndexItem",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "property"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"name\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "ignoreAccents"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token boolean"
            },
            "false"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ";"
          ]
        ]
      ],
      " "
    ],
    " ",
    [
      "p",
      null,
      "Multiple properties to index can be specified in the index creation method."
    ],
    " ",
    [
      "p",
      null,
      "With the index created, an FTS query on the property that is being indexed can be constructed and ran.\nThe full-text search criteria is defined as a ",
      [
        "code",
        null,
        "FullTextExpression"
      ],
      ".\nThe left-hand side is the full-text index to use and the right-hand side is the pattern to match."
    ],
    " ",
    [
      "docs-code",
      {
        "language": "typescript"
      },
      " ",
      [
        "pre",
        null,
        [
          "code",
          null,
          [
            "span",
            {
              "class": "token keyword"
            },
            "let"
          ],
          " whereClause ",
          [
            "span",
            {
              "class": "token operator"
            },
            "="
          ],
          " FullTextExpression",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "index"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"nameFTSIndex\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "match"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"buy\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ";"
          ],
          "\n",
          [
            "span",
            {
              "class": "token keyword"
            },
            "let"
          ],
          " ftsQuery ",
          [
            "span",
            {
              "class": "token operator"
            },
            "="
          ],
          " QueryBuilder",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "select"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "SelectResult",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "expression"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "Meta",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          "id",
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          "\n    ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token keyword"
            },
            "from"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "DataSource",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "database"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "database",
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          "\n    ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "where"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "whereClause",
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ";"
          ],
          "\n",
          [
            "span",
            {
              "class": "token keyword"
            },
            "let"
          ],
          " ftsQueryResult ",
          [
            "span",
            {
              "class": "token operator"
            },
            "="
          ],
          " ",
          [
            "span",
            {
              "class": "token keyword"
            },
            "await"
          ],
          " ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token keyword"
            },
            "await"
          ],
          " ftsQuery",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "execute"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "allResults"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ";"
          ],
          "\n",
          [
            "span",
            {
              "class": "token keyword"
            },
            "for"
          ],
          " ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token keyword"
            },
            "let"
          ],
          " result ",
          [
            "span",
            {
              "class": "token keyword"
            },
            "of"
          ],
          " ftsQueryResult",
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          "\n    ",
          [
            "span",
            {
              "class": "token builtin"
            },
            "console"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "log"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "String",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "format"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"document properties %s\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          " result",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "getString"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token number"
            },
            "0"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ";"
          ]
        ]
      ],
      " "
    ],
    " ",
    [
      "p",
      null,
      "In the example above, the pattern to match is a word, the full-text search query matches all documents that contain the word \"buy\" in the value of the ",
      [
        "code",
        null,
        "doc.name"
      ],
      " property."
    ],
    " ",
    [
      "p",
      null,
      "Full-text search is supported in the following languages: danish, dutch, english, finnish, french, german, hungarian, italian, norwegian, portuguese, romanian, russian, spanish, swedish and turkish."
    ],
    " ",
    [
      "p",
      null,
      "The pattern to match can also be in the following forms:"
    ],
    " ",
    [
      "ul",
      null,
      " ",
      [
        "li",
        null,
        [
          "em",
          null,
          "prefix queries:"
        ],
        " the query expression used to search for a term prefix is the prefix itself with a \"*\" character appended to it.\nFor example:"
      ],
      " "
    ],
    " ",
    [
      "docs-code",
      {
        "language": "null"
      },
      " ",
      [
        "pre",
        null,
        [
          "code",
          null,
          "\"'lin*'\"\n-- Query for all documents containing a term with the prefix \"lin\". This will match\n-- all documents that contain \"linux\", but also those that contain terms \"linear\",\n--\"linker\", \"linguistic\" and so on."
        ]
      ],
      " "
    ],
    " ",
    [
      "ul",
      null,
      " ",
      [
        "li",
        null,
        [
          "em",
          null,
          "overriding the property name that is being indexed:"
        ],
        " Normally, a token or token prefix query is matched against the document property specified as the left-hand side of the ",
        [
          "code",
          null,
          "match"
        ],
        " operator.\nThis may be overridden by specifying a property name followed by a \":\" character before a basic term query.\nThere may be space between the \":\" and the term to query for, but not between the property name and the \":\" character.\nFor example:"
      ],
      " "
    ],
    " ",
    [
      "docs-code",
      {
        "language": "null"
      },
      " ",
      [
        "pre",
        null,
        [
          "code",
          null,
          "'title:linux problems'\n-- Query the database for documents for which the term \"linux\" appears in\n-- the document title, and the term \"problems\" appears in either the title\n-- or body of the document.</pre>"
        ]
      ],
      " "
    ],
    " ",
    [
      "ul",
      null,
      " ",
      [
        "li",
        null,
        [
          "em",
          null,
          "phrase queries:"
        ],
        " a phrase query is a query that retrieves all documents that contain a nominated set of terms or term prefixes in a specified order with no intervening tokens.\nPhrase queries are specified by enclosing a space separated sequence of terms or term prefixes in double quotes (\").\nFor example:"
      ],
      " "
    ],
    " ",
    [
      "docs-code",
      {
        "language": "null"
      },
      " ",
      [
        "pre",
        null,
        [
          "code",
          null,
          "\"'\"linux applications\"'\"\n-- Query for all documents that contain the phrase \"linux applications\".</pre>"
        ]
      ],
      " "
    ],
    " ",
    [
      "ul",
      null,
      " ",
      [
        "li",
        null,
        [
          "em",
          null,
          "NEAR queries:"
        ],
        " A NEAR query is a query that returns documents that contain a two or more nominated terms or phrases within a specified proximity of each other (by default with 10 or less intervening terms).\nA NEAR query is specified by putting the keyword \"NEAR\" between two phrase, token or token prefix queries.\nTo specify a proximity other than the default, an operator of the form \"NEAR/\" may be used, where is the maximum number of intervening terms allowed.\nFor example:"
      ],
      " "
    ],
    " ",
    [
      "docs-code",
      {
        "language": "null"
      },
      " ",
      [
        "pre",
        null,
        [
          "code",
          null,
          "\"'database NEAR/2 \"replication\"'\"\n-- Search for a document that contains the phrase \"replication\" and the term\n-- \"database\" with not more than 2 terms separating the two.</pre>"
        ]
      ],
      " "
    ],
    " ",
    [
      "ul",
      null,
      " ",
      [
        "li",
        null,
        [
          "em",
          null,
          "AND, OR & NOT query operators:"
        ],
        " The enhanced query syntax supports the AND, OR and NOT binary set operators.\nEach of the two operands to an operator may be a basic FTS query, or the result of another AND, OR or NOT set operation.\nOperators must be entered using capital letters.\nOtherwise, they are interpreted as basic term queries instead of set operators.\nFor example:"
      ],
      " "
    ],
    " ",
    [
      "docs-code",
      {
        "language": "null"
      },
      " ",
      [
        "pre",
        null,
        [
          "code",
          null,
          "'couchbase AND database'\n-- Return the set of documents that contain the term \"couchbase\", and the\n-- term \"database\". This query will return the document with docid 3 only.</pre>"
        ]
      ],
      " "
    ],
    " ",
    [
      "p",
      null,
      "When using the enhanced query syntax, parenthesis may be used to specify the precedence of the various operators.\nFor example:"
    ],
    " ",
    [
      "docs-code",
      {
        "language": "null"
      },
      " ",
      [
        "pre",
        null,
        [
          "code",
          null,
          "'(\"couchbase database\" OR \"sqlite library\") AND linux'\n-- Query for the set of documents that contains the term \"linux\", and at least\n-- one of the phrases \"couchbase database\" and \"sqlite library\".</pre>"
        ]
      ],
      " "
    ],
    " ",
    [
      "h3",
      {
        "id": "ordering-results"
      },
      " ",
      [
        "a",
        {
          "href": "#ordering-results"
        },
        "Ordering results"
      ],
      " "
    ],
    " ",
    [
      "p",
      null,
      "It’s very common to sort full-text results in descending order of relevance.\nThis can be a very difficult heuristic to define, but Couchbase Lite comes with a ranking function you can use.\nIn the ",
      [
        "code",
        null,
        "OrderBy"
      ],
      " array, use a string of the form ",
      [
        "code",
        null,
        "Rank(X)"
      ],
      ", where ",
      [
        "code",
        null,
        "X"
      ],
      " is the property or expression being searched, to represent the ranking of the result."
    ],
    " ",
    [
      "h2",
      {
        "id": "replication"
      },
      " ",
      [
        "a",
        {
          "href": "#replication"
        },
        "Replication"
      ],
      " "
    ],
    " ",
    [
      "p",
      null,
      "Couchbase Mobile 2.0 uses a new replication protocol based on WebSockets."
    ],
    " ",
    [
      "h3",
      {
        "id": "compatibility"
      },
      " ",
      [
        "a",
        {
          "href": "#compatibility"
        },
        "Compatibility"
      ],
      " "
    ],
    " ",
    [
      "p",
      null,
      "The new protocol is ",
      [
        "strong",
        null,
        "incompatible"
      ],
      " with CouchDB-based databases.\nAnd since Couchbase Lite 2 only supports the new protocol, you will need to run a version of Sync Gateway that ",
      [
        "a",
        {
          "href": "compatibility-matrix.html",
          "class": "page"
        },
        "supports it"
      ],
      "."
    ],
    " ",
    [
      "p",
      null,
      "To use this protocol with Couchbase Lite 2.0, the replication URL should specify WebSockets as the URL scheme (see the \"Starting a Replication\" section below).\nMobile clients using Couchbase Lite 1.x can continue to use ",
      [
        "strong",
        null,
        "http"
      ],
      " as the URL scheme.\nSync Gateway 2.0 will automatically use the 1.x replication protocol when a Couchbase Lite 1.x client connects through ",
      [
        "a",
        {
          "href": "http://localhost:4984/db"
        },
        "http://localhost:4984/db"
      ],
      " and the 2.0 replication protocol when a Couchbase Lite 2.0 client connects through ws://localhost:4984/db."
    ],
    " ",
    [
      "h3",
      {
        "id": "starting-sync-gateway"
      },
      " ",
      [
        "a",
        {
          "href": "#starting-sync-gateway"
        },
        "Starting Sync Gateway"
      ],
      " "
    ],
    " ",
    [
      "p",
      null,
      [
        "a",
        {
          "href": "https://www.couchbase.com/downloads"
        },
        "Download Sync Gateway"
      ],
      " and start it from the command line with the configuration file created above."
    ],
    " ",
    [
      "docs-code",
      {
        "language": "shell"
      },
      " ",
      [
        "pre",
        null,
        [
          "code",
          null,
          "~/Downloads/couchbase-sync-gateway/bin/sync_gateway"
        ]
      ],
      " "
    ],
    " ",
    [
      "p",
      null,
      "For platform specific installation instructions, refer to the Sync Gateway ",
      [
        "a",
        {
          "href": "https://developer.couchbase.com/documentation/mobile/current/installation/sync-gateway/index.html"
        },
        "installation guide"
      ],
      "."
    ],
    " ",
    [
      "h3",
      {
        "id": "starting-a-replication"
      },
      " ",
      [
        "a",
        {
          "href": "#starting-a-replication"
        },
        "Starting a Replication"
      ],
      " "
    ],
    " ",
    [
      "p",
      null,
      "Replication can be bidirectional, this means you can start a ",
      [
        "code",
        null,
        "push"
      ],
      "/",
      [
        "code",
        null,
        "pull"
      ],
      " replication with a single instance.\nThe replication’s parameters can be specified through the ",
      [
        "a",
        {
          "href": "http://docs.couchbase.com/mobile/2.0/couchbase-lite-java/db022/index.html?com/couchbase/lite/ReplicatorConfiguration.html"
        },
        [
          "code",
          null,
          "ReplicatorConfiguration"
        ]
      ],
      " object;\nfor example, if you wish to start a ",
      [
        "code",
        null,
        "push"
      ],
      " only or ",
      [
        "code",
        null,
        "pull"
      ],
      " only replication."
    ],
    " ",
    [
      "p",
      null,
      "The following example creates a ",
      [
        "code",
        null,
        "pull"
      ],
      " replication with Sync Gateway."
    ],
    " ",
    [
      "docs-code",
      {
        "language": "typescript"
      },
      " ",
      [
        "pre",
        null,
        [
          "code",
          null,
          [
            "span",
            {
              "class": "token keyword"
            },
            "class"
          ],
          " ",
          [
            "span",
            {
              "class": "token class-name"
            },
            "MyClass"
          ],
          " ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "{"
          ],
          "\n  database",
          [
            "span",
            {
              "class": "token operator"
            },
            ":"
          ],
          " Database",
          [
            "span",
            {
              "class": "token punctuation"
            },
            ";"
          ],
          "\n  replicator",
          [
            "span",
            {
              "class": "token operator"
            },
            ":"
          ],
          " Replicator",
          [
            "span",
            {
              "class": "token punctuation"
            },
            ";"
          ],
          "\n\n  ",
          [
            "span",
            {
              "class": "token function"
            },
            "startReplication"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          " ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "{"
          ],
          "\n    ",
          [
            "span",
            {
              "class": "token keyword"
            },
            "let"
          ],
          " endpoint ",
          [
            "span",
            {
              "class": "token operator"
            },
            "="
          ],
          " ",
          [
            "span",
            {
              "class": "token keyword"
            },
            "new"
          ],
          " ",
          [
            "span",
            {
              "class": "token class-name"
            },
            "URLEndpoint"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "'ws://10.0.2.2:4984/db'"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ";"
          ],
          "\n    ",
          [
            "span",
            {
              "class": "token keyword"
            },
            "let"
          ],
          " config ",
          [
            "span",
            {
              "class": "token operator"
            },
            "="
          ],
          " ",
          [
            "span",
            {
              "class": "token keyword"
            },
            "new"
          ],
          " ",
          [
            "span",
            {
              "class": "token class-name"
            },
            "ReplicatorConfiguration"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token keyword"
            },
            "this"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          "database",
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          " endpoint",
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ";"
          ],
          "\n    config",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "setReplicatorType"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "ReplicatorConfiguration",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          "ReplicatorType",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token constant"
            },
            "PULL"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ";"
          ],
          "\n    ",
          [
            "span",
            {
              "class": "token keyword"
            },
            "this"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          "replicator ",
          [
            "span",
            {
              "class": "token operator"
            },
            "="
          ],
          " ",
          [
            "span",
            {
              "class": "token keyword"
            },
            "new"
          ],
          " ",
          [
            "span",
            {
              "class": "token class-name"
            },
            "Replicator"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "config",
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ";"
          ],
          "\n    ",
          [
            "span",
            {
              "class": "token keyword"
            },
            "return"
          ],
          " ",
          [
            "span",
            {
              "class": "token keyword"
            },
            "this"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          "replicator",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "start"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ";"
          ],
          "\n  ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "}"
          ],
          "\n",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "}"
          ]
        ]
      ],
      " "
    ],
    " ",
    [
      "p",
      null,
      "A replication is an asynchronous operation.\nTo keep a reference to the ",
      [
        "code",
        null,
        "replicator"
      ],
      " object, you can set it as an instance property."
    ],
    " ",
    [
      "p",
      null,
      "To verify that documents have been replicated, you can:"
    ],
    " ",
    [
      "ul",
      null,
      " ",
      [
        "li",
        null,
        [
          "p",
          null,
          "Monitor the Sync Gateway sequence number returned by the database endpoint (",
          [
            "code",
            null,
            "GET /{db}/"
          ],
          ").\nThe sequence number increments for every change that happens on the Sync Gateway database."
        ],
        " "
      ],
      " ",
      [
        "li",
        null,
        [
          "p",
          null,
          "Query a document by ID on the Sync Gateway REST API (",
          [
            "code",
            null,
            "GET /{db}/{id}"
          ],
          ")."
        ],
        " "
      ],
      " ",
      [
        "li",
        null,
        [
          "p",
          null,
          "Query a document from the Query Workbench on the Couchbase Server Console."
        ],
        " "
      ],
      " "
    ],
    " ",
    [
      "p",
      null,
      "Couchbase Lite 2.0 uses WebSockets as the communication protocol to transmit data.\nSome load balancers are not configured for WebSocket connections by default (NGINX for example);\nso it might be necessary to explicitly enable them in the load balancer’s configuration (see ",
      [
        "a",
        {
          "href": "https://developer.couchbase.com/documentation/mobile/current/guides/sync-gateway/nginx/index.html"
        },
        "Load Balancers"
      ],
      ")."
    ],
    " ",
    [
      "p",
      null,
      "By default, the WebSocket protocol uses compression to optimize for speed and bandwidth utilization.\nThe level of compression is set on Sync Gateway and can be tuned in the configuration file (",
      [
        "code",
        null,
        "replicator_compression"
      ],
      ")."
    ],
    " ",
    [
      "h4",
      {
        "id": "replication-ordering"
      },
      " ",
      [
        "a",
        {
          "href": "#replication-ordering"
        },
        "Replication Ordering"
      ],
      " "
    ],
    " ",
    [
      "p",
      null,
      "To optimize for speed, the replication protocol doesn’t guarantee that documents will be received in a particular order.\nSo we don’t recommend to rely on that when using the replication or database change listeners for example."
    ],
    " ",
    [
      "h3",
      {
        "id": "troubleshooting"
      },
      " ",
      [
        "a",
        {
          "href": "#troubleshooting"
        },
        "Troubleshooting"
      ],
      " "
    ],
    " ",
    [
      "p",
      null,
      "As always, when there is a problem with replication, logging is your friend.\nThe following example increases the log output for activity related to replication with Sync Gateway."
    ],
    " ",
    [
      "p",
      null,
      [
        "code",
        null,
        "Database.setLogLevel(LogDomain.REPLICATOR, LogLevel.VERBOSE);"
      ]
    ],
    " ",
    [
      "h3",
      {
        "id": "replication-status"
      },
      " ",
      [
        "a",
        {
          "href": "#replication-status"
        },
        "Replication Status"
      ],
      " "
    ],
    " ",
    [
      "p",
      null,
      "The ",
      [
        "code",
        null,
        "replication.Status.Activity"
      ],
      " property can be used to check the status of a replication.\nFor example, when the replication is actively transferring data and when it has stopped."
    ],
    " ",
    [
      "docs-code",
      {
        "language": "typescript"
      },
      " ",
      [
        "pre",
        null,
        [
          "code",
          null,
          "replication",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "addChangeListener"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token parameter"
            },
            "change"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          " ",
          [
            "span",
            {
              "class": "token operator"
            },
            "=>"
          ],
          " ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "{"
          ],
          "\n  ",
          [
            "span",
            {
              "class": "token keyword"
            },
            "if"
          ],
          " ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "change",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          "activityLevel ",
          [
            "span",
            {
              "class": "token operator"
            },
            "=="
          ],
          " Replicator",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          "ActivityLevel",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token constant"
            },
            "STOPPED"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          "\n      ",
          [
            "span",
            {
              "class": "token builtin"
            },
            "console"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "log"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"Replication stopped\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ";"
          ],
          "\n",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "}"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ";"
          ]
        ]
      ],
      " "
    ],
    " ",
    [
      "p",
      null,
      "The following table lists the different activity levels in the API and the meaning of each one."
    ],
    " ",
    [
      "table",
      {
        "class": "tableblock frame-all grid-all spread"
      },
      " ",
      [
        "colgroup",
        null,
        " ",
        [
          "col",
          null
        ],
        " ",
        [
          "col",
          null
        ],
        " "
      ],
      " ",
      [
        "thead",
        null,
        " ",
        [
          "tr",
          null,
          " ",
          [
            "th",
            {
              "class": "tableblock halign-left valign-top"
            },
            "State"
          ],
          " ",
          [
            "th",
            {
              "class": "tableblock halign-left valign-top"
            },
            "Meaning"
          ],
          " "
        ],
        " "
      ],
      " ",
      [
        "tbody",
        null,
        " ",
        [
          "tr",
          null,
          " ",
          [
            "td",
            {
              "class": "tableblock halign-left valign-top"
            },
            [
              "p",
              {
                "class": "tableblock"
              },
              [
                "code",
                null,
                "STOPPED"
              ]
            ]
          ],
          " ",
          [
            "td",
            {
              "class": "tableblock halign-left valign-top"
            },
            [
              "p",
              {
                "class": "tableblock"
              },
              "The replication is finished or hit a fatal error."
            ]
          ],
          " "
        ],
        " ",
        [
          "tr",
          null,
          " ",
          [
            "td",
            {
              "class": "tableblock halign-left valign-top"
            },
            [
              "p",
              {
                "class": "tableblock"
              },
              [
                "code",
                null,
                "OFFLINE"
              ]
            ]
          ],
          " ",
          [
            "td",
            {
              "class": "tableblock halign-left valign-top"
            },
            [
              "p",
              {
                "class": "tableblock"
              },
              "The replicator is offline as the remote host is unreachable."
            ]
          ],
          " "
        ],
        " ",
        [
          "tr",
          null,
          " ",
          [
            "td",
            {
              "class": "tableblock halign-left valign-top"
            },
            [
              "p",
              {
                "class": "tableblock"
              },
              [
                "code",
                null,
                "CONNECTING"
              ]
            ]
          ],
          " ",
          [
            "td",
            {
              "class": "tableblock halign-left valign-top"
            },
            [
              "p",
              {
                "class": "tableblock"
              },
              "The replicator is connecting to the remote host."
            ]
          ],
          " "
        ],
        " ",
        [
          "tr",
          null,
          " ",
          [
            "td",
            {
              "class": "tableblock halign-left valign-top"
            },
            [
              "p",
              {
                "class": "tableblock"
              },
              [
                "code",
                null,
                "IDLE"
              ]
            ]
          ],
          " ",
          [
            "td",
            {
              "class": "tableblock halign-left valign-top"
            },
            [
              "p",
              {
                "class": "tableblock"
              },
              "The replication caught up with all the changes available from the server.\nThe ",
              [
                "code",
                null,
                "IDLE"
              ],
              " state is only used in continuous replications."
            ]
          ],
          " "
        ],
        " ",
        [
          "tr",
          null,
          " ",
          [
            "td",
            {
              "class": "tableblock halign-left valign-top"
            },
            [
              "p",
              {
                "class": "tableblock"
              },
              [
                "code",
                null,
                "BUSY"
              ]
            ]
          ],
          " ",
          [
            "td",
            {
              "class": "tableblock halign-left valign-top"
            },
            [
              "p",
              {
                "class": "tableblock"
              },
              "The replication is actively transferring data."
            ]
          ],
          " "
        ],
        " "
      ],
      " "
    ],
    " ",
    [
      "h3",
      {
        "id": "handling-network-errors"
      },
      " ",
      [
        "a",
        {
          "href": "#handling-network-errors"
        },
        "Handling Network Errors"
      ],
      " "
    ],
    " ",
    [
      "p",
      null,
      "If an error occurs, the replication status will be updated with an ",
      [
        "code",
        null,
        "Error"
      ],
      " which follows the standard HTTP error codes.\nThe following example monitors the replication for errors and logs the error code to the console."
    ],
    " ",
    [
      "docs-code",
      {
        "language": "typescript"
      },
      " ",
      [
        "pre",
        null,
        [
          "code",
          null,
          "replication",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "addChangeListener"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token parameter"
            },
            "change"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          " ",
          [
            "span",
            {
              "class": "token operator"
            },
            "=>"
          ],
          " ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "{"
          ],
          "\n  ",
          [
            "span",
            {
              "class": "token keyword"
            },
            "let"
          ],
          " error ",
          [
            "span",
            {
              "class": "token operator"
            },
            "="
          ],
          " change",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          "error",
          [
            "span",
            {
              "class": "token punctuation"
            },
            ";"
          ],
          "\n  ",
          [
            "span",
            {
              "class": "token keyword"
            },
            "if"
          ],
          " ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "error ",
          [
            "span",
            {
              "class": "token operator"
            },
            "!="
          ],
          " ",
          [
            "span",
            {
              "class": "token keyword"
            },
            "null"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          "\n      ",
          [
            "span",
            {
              "class": "token builtin"
            },
            "console"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "log"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token string"
            },
            "\"Error code::\""
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          " error",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "getCode"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ";"
          ],
          "\n",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "}"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ";"
          ],
          "\nreplication",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "start"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ";"
          ]
        ]
      ],
      " "
    ],
    " ",
    [
      "p",
      null,
      "When a permanent error occurs (i.e., ",
      [
        "code",
        null,
        "404"
      ],
      ": not found, ",
      [
        "code",
        null,
        "401"
      ],
      ": unauthorized), the replicator (continuous or one-shot) will stop permanently.\nIf the error is temporary (i.e., waiting for the network to recover), a continuous replication will retry to connect indefinitely and if the replication is one-shot it will retry for a limited number of times.\nThe following error codes are considered temporary by the Couchbase Lite replicator and thus will trigger a connection retry."
    ],
    " ",
    [
      "ul",
      null,
      " ",
      [
        "li",
        null,
        " ",
        [
          "p",
          null,
          [
            "code",
            null,
            "408"
          ],
          ": Request Timeout"
        ],
        " "
      ],
      " ",
      [
        "li",
        null,
        " ",
        [
          "p",
          null,
          [
            "code",
            null,
            "429"
          ],
          ": Too Many Requests"
        ],
        " "
      ],
      " ",
      [
        "li",
        null,
        " ",
        [
          "p",
          null,
          [
            "code",
            null,
            "500"
          ],
          ": Internal Server Error"
        ],
        " "
      ],
      " ",
      [
        "li",
        null,
        " ",
        [
          "p",
          null,
          [
            "code",
            null,
            "502"
          ],
          ": Bad Gateway"
        ],
        " "
      ],
      " ",
      [
        "li",
        null,
        " ",
        [
          "p",
          null,
          [
            "code",
            null,
            "503"
          ],
          ": Service Unavailable"
        ],
        " "
      ],
      " ",
      [
        "li",
        null,
        " ",
        [
          "p",
          null,
          [
            "code",
            null,
            "504"
          ],
          ": Gateway Timeout"
        ],
        " "
      ],
      " ",
      [
        "li",
        null,
        " ",
        [
          "p",
          null,
          [
            "code",
            null,
            "1001"
          ],
          ": DNS resolution error"
        ],
        " "
      ],
      " "
    ],
    " ",
    [
      "h3",
      {
        "id": "custom-headers"
      },
      " ",
      [
        "a",
        {
          "href": "#custom-headers"
        },
        "Custom Headers"
      ],
      " "
    ],
    " ",
    [
      "p",
      null,
      "Custom headers can be set on the configuration object.\nAnd the replicator will send those header(s) in every request.\nAs an example, this feature can be useful to pass additional credentials when there is an authentication or authorization step being done by a proxy server (between Couchbase Lite and Sync Gateway)."
    ],
    " ",
    [
      "docs-code",
      {
        "language": "typescript"
      },
      " ",
      [
        "pre",
        null,
        [
          "code",
          null,
          [
            "span",
            {
              "class": "token keyword"
            },
            "let"
          ],
          " config ",
          [
            "span",
            {
              "class": "token operator"
            },
            "="
          ],
          " ",
          [
            "span",
            {
              "class": "token keyword"
            },
            "new"
          ],
          " ",
          [
            "span",
            {
              "class": "token class-name"
            },
            "ReplicatorConfiguration"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          "database",
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          " endpoint",
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ";"
          ],
          "\nconfig",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "setHeaders"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "{"
          ],
          "\n  ",
          [
            "span",
            {
              "class": "token string"
            },
            "\"CustomHeaderName\""
          ],
          [
            "span",
            {
              "class": "token operator"
            },
            ":"
          ],
          " ",
          [
            "span",
            {
              "class": "token string"
            },
            "\"Value\""
          ],
          "\n",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "}"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ";"
          ]
        ]
      ],
      " "
    ],
    " ",
    [
      "h2",
      {
        "id": "handling-conflicts"
      },
      " ",
      [
        "a",
        {
          "href": "#handling-conflicts"
        },
        "Handling Conflicts"
      ],
      " "
    ],
    " ",
    [
      "p",
      null,
      "In Couchbase Lite 2.0, document conflicts are automatically resolved.\nThis functionality aims to simplify the default behavior of conflict handling and save disk space (conflicting revisions will no longer be stored in the database).\nThere are 2 different ",
      [
        "code",
        null,
        "save"
      ],
      " method signatures to specify how to handle a possible conflict:"
    ],
    " ",
    [
      "ul",
      null,
      " ",
      [
        "li",
        null,
        [
          "code",
          null,
          "save(document: MutableDocument)"
        ],
        ": when concurrent writes to an individual record occur, the conflict is automatically resolved and only one non-conflicting document update is stored in the database.\nThe Last-Write-Win (LWW) algorithm is used to pick the winning revision."
      ],
      " ",
      [
        "li",
        null,
        [
          "code",
          null,
          "save(document: MutableDocument, concurrencyControl: ConcurrencyControl)"
        ],
        ": attempts to save the document with a concurrency control.\nThe concurrency control parameter has two possible values:",
        [
          "ul",
          null,
          " ",
          [
            "li",
            null,
            [
              "code",
              null,
              "lastWriteWins"
            ],
            ": The last operation wins if there is a conflict."
          ],
          " ",
          [
            "li",
            null,
            [
              "code",
              null,
              "failOnConflict"
            ],
            ": The operation will fail if there is a conflict."
          ],
          " "
        ],
        " "
      ],
      " "
    ],
    " ",
    [
      "p",
      null,
      "Similarly to the save operation, the delete operation also has two method signatures to specify how to handle a possible conflict:"
    ],
    " ",
    [
      "ul",
      null,
      " ",
      [
        "li",
        null,
        [
          "code",
          null,
          "delete(document: Document)"
        ],
        ": The last write will win if there is a conflict."
      ],
      " ",
      [
        "li",
        null,
        [
          "code",
          null,
          "delete(document: Document, concurrencyControl: ConcurrencyControl)"
        ],
        ": attemps to delete the document with a concurrency control.\nThe concurrency control parameter has two possible values:",
        [
          "ul",
          null,
          " ",
          [
            "li",
            null,
            [
              "code",
              null,
              "lastWriteWins"
            ],
            ": The last operation wins if there is a conflict.",
            [
              "p",
              null
            ]
          ],
          " ",
          [
            "li",
            null,
            [
              "code",
              null,
              "failOnConflict"
            ],
            ": The operation will fail if there is a conflict.",
            [
              "p",
              null
            ]
          ],
          " "
        ],
        " "
      ],
      " "
    ],
    " ",
    [
      "h2",
      {
        "id": "database-replicas"
      },
      " ",
      [
        "a",
        {
          "href": "#database-replicas"
        },
        "Database Replicas"
      ],
      " "
    ],
    " ",
    [
      "p",
      null,
      "Database replicas is available in the ",
      [
        "strong",
        null,
        "Ionic Native"
      ],
      " only (",
      [
        "a",
        {
          "href": "https://www.couchbase.com/downloads",
          "class": "bare"
        },
        "https://www.couchbase.com/downloads"
      ],
      ").\nStarting in Couchbase Lite 2.0, replication between two local databases is now supported.\nIt allows a Couchbase Lite replicator to store data on secondary storage.\nIt would be especially useful in scenarios where a user’s device is damaged and the data needs to be moved to a different device.\nNote that the code below won’t compile if you’re running the ",
      [
        "strong",
        null,
        "Community Plugin"
      ],
      " of Couchbase Lite."
    ],
    " ",
    "",
    " ",
    [
      "h1",
      {
        "id": "changelog"
      },
      " ",
      [
        "a",
        {
          "href": "#changelog"
        },
        "Changelog"
      ],
      " "
    ]
  ],
  "headings": [
    {
      "text": "Project Requirements",
      "href": "#project-requirements"
    },
    {
      "text": "Reference Apps",
      "href": "#reference-apps"
    },
    {
      "text": "Getting Started",
      "href": "#getting-started"
    },
    {
      "text": "Database",
      "href": "#database"
    },
    {
      "text": "Document",
      "href": "#document"
    },
    {
      "text": "Blobs",
      "href": "#blobs"
    },
    {
      "text": "Query",
      "href": "#query"
    },
    {
      "text": "Indexing",
      "href": "#indexing"
    },
    {
      "text": "Full-Text Search",
      "href": "#full-text-search"
    },
    {
      "text": "Replication",
      "href": "#replication"
    },
    {
      "text": "Handling Conflicts",
      "href": "#handling-conflicts"
    },
    {
      "text": "Database Replicas",
      "href": "#database-replicas"
    }
  ],
  "pageClass": "page-enterprise-offline-storage-1-0-x-offline-storage"
}
