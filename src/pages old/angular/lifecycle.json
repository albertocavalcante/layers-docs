{
  "path": "/docs/angular/lifecycle",
  "previousText": "Your First App: Theming",
  "previousUrl": "/docs/angular/your-first-app/theming",
  "nextText": "Navigation",
  "nextUrl": "/docs/angular/navigation",
  "contributors": [
    "elylucas"
  ],
  "body": [
    "div",
    null,
    [
      "p",
      {
        "class": "intro"
      },
      "This guide covers how the page life cycle works in an app built with Ionic and Angular."
    ],
    " ",
    [
      "p",
      {
        "class": "intro"
      },
      [
        "img",
        {
          "src": "/docs/assets/img/guides/lifecycle/ioniclifecycle.png",
          "alt": "Ionic life cycle events demo"
        }
      ]
    ],
    " ",
    [
      "h2",
      {
        "id": "angular-life-cycle-events"
      },
      " ",
      [
        "a",
        {
          "href": "#angular-life-cycle-events"
        },
        "Angular Life Cycle Events"
      ],
      " "
    ],
    " ",
    [
      "p",
      null,
      "Ionic embraces the life cycle events provided by Angular. The two Angular events you will find using the most are:"
    ],
    " ",
    [
      "table",
      null,
      " ",
      [
        "thead",
        null,
        " ",
        [
          "tr",
          null,
          " ",
          [
            "th",
            null,
            "Event Name"
          ],
          " ",
          [
            "th",
            null,
            "Description"
          ],
          " "
        ],
        " "
      ],
      " ",
      [
        "tbody",
        null,
        [
          "tr",
          null,
          " ",
          [
            "td",
            null,
            [
              "code",
              null,
              "ngOnInit"
            ]
          ],
          " ",
          [
            "td",
            null,
            "Fired once during component initialization. This event can be used to initialize local members and make calls into services that only need to be done once."
          ],
          " "
        ],
        " ",
        [
          "tr",
          null,
          " ",
          [
            "td",
            null,
            [
              "code",
              null,
              "ngOnDestroy"
            ]
          ],
          " ",
          [
            "td",
            null,
            "Fired right before Angular destroys the view. Useful for cleanup like unsubscribing from observables."
          ],
          " "
        ],
        " "
      ]
    ],
    " ",
    [
      "p",
      null,
      "For more info on the Angular Component Life Cycle events, visit their ",
      [
        "a",
        {
          "href": "https://angular.io/guide/lifecycle-hooks"
        },
        "component lifecycle docs"
      ],
      "."
    ],
    " ",
    [
      "h2",
      {
        "id": "ionic-page-events"
      },
      " ",
      [
        "a",
        {
          "href": "#ionic-page-events"
        },
        "Ionic Page Events"
      ],
      " "
    ],
    " ",
    [
      "p",
      null,
      "In addition to the Angular life cycle events, Ionic Angular provides a few additional events that you can use:"
    ],
    " ",
    [
      "table",
      null,
      " ",
      [
        "thead",
        null,
        " ",
        [
          "tr",
          null,
          " ",
          [
            "th",
            null,
            "Event Name"
          ],
          " ",
          [
            "th",
            null,
            "Description"
          ],
          " "
        ],
        " "
      ],
      " ",
      [
        "tbody",
        null,
        [
          "tr",
          null,
          " ",
          [
            "td",
            null,
            [
              "code",
              null,
              "ionViewWillEnter"
            ]
          ],
          " ",
          [
            "td",
            null,
            "Fired when the component routing to is about to animate into view."
          ],
          " "
        ],
        " ",
        [
          "tr",
          null,
          " ",
          [
            "td",
            null,
            [
              "code",
              null,
              "ionViewDidEnter"
            ]
          ],
          " ",
          [
            "td",
            null,
            "Fired when the component routing to has finished animating."
          ],
          " "
        ],
        " ",
        [
          "tr",
          null,
          " ",
          [
            "td",
            null,
            [
              "code",
              null,
              "ionViewWillLeave"
            ]
          ],
          " ",
          [
            "td",
            null,
            "Fired when the component routing from is about to animate."
          ],
          " "
        ],
        " ",
        [
          "tr",
          null,
          " ",
          [
            "td",
            null,
            [
              "code",
              null,
              "ionViewDidLeave"
            ]
          ],
          " ",
          [
            "td",
            null,
            "Fired when the component routing to has finished animating."
          ],
          " "
        ],
        " "
      ]
    ],
    " ",
    [
      "p",
      null,
      "The difference between ",
      [
        "code",
        null,
        "ionViewWillEnter"
      ],
      " and ",
      [
        "code",
        null,
        "ionViewDidEnter"
      ],
      " is when they fire. The former fires right after ",
      [
        "code",
        null,
        "ngOnInit"
      ],
      " but before the page transition begins, and the latter directly after the transition ends. "
    ],
    " ",
    [
      "p",
      null,
      "For ",
      [
        "code",
        null,
        "ionViewWillLeave"
      ],
      " and ",
      [
        "code",
        null,
        "ionViewDidLeave"
      ],
      ", ",
      [
        "code",
        null,
        "ionViewWillLeave"
      ],
      " gets called directly before the transition away from the current page begins, and ",
      [
        "code",
        null,
        "ionViewDidLeave"
      ],
      " does not get called until after the new page gets successfully transitioned into (after the new pages ",
      [
        "code",
        null,
        "ionViewDidEnter"
      ],
      " fires)."
    ],
    " ",
    [
      "p",
      null,
      [
        "img",
        {
          "src": "/docs/assets/img/guides/lifecycle/ioniclifecycle.gif",
          "alt": "Ionic life cycle events demo"
        }
      ]
    ],
    " ",
    [
      "h2",
      {
        "id": "how-ionic-handles-the-life-of-a-page"
      },
      " ",
      [
        "a",
        {
          "href": "#how-ionic-handles-the-life-of-a-page"
        },
        "How Ionic Handles the Life of a Page"
      ],
      " "
    ],
    " ",
    [
      "p",
      null,
      "Ionic has its router outlet, called ",
      [
        "code",
        null,
        "<ion-router-outlet />"
      ],
      ". This outlet extends Angular's ",
      [
        "code",
        null,
        "<router-outlet />"
      ],
      " with some additional functionality to enable better experiences for mobile devices."
    ],
    " ",
    [
      "p",
      null,
      "When an app is wrapped in ",
      [
        "code",
        null,
        "<ion-router-outlet />"
      ],
      ", Ionic treats navigation a bit differently. When you navigate to a new page, Ionic will keep the old page in the existing DOM, but hide it from your view and transition the new page. The reason we do this is two-fold: "
    ],
    " ",
    [
      "p",
      null,
      "1) We can maintain the state of the old page (data on the screen, scroll position, etc..)",
      [
        "br",
        null
      ],
      "2) We can provide a smoother transition back to the page since it is already there and doesn't need to be recreated."
    ],
    " ",
    [
      "p",
      null,
      "Pages are only removed from the DOM when they are \"popped\", for instance, by pressing the back button in the UI or the browsers back button."
    ],
    " ",
    [
      "p",
      null,
      "Because of this special handling, the ",
      [
        "code",
        null,
        "ngOnInit"
      ],
      " and ",
      [
        "code",
        null,
        "ngOnDestroy"
      ],
      " methods might not fire when you would usually think they should."
    ],
    " ",
    [
      "p",
      null,
      [
        "code",
        null,
        "ngOnInit"
      ],
      " will only fire each time the page is freshly created, but not when navigated back to the page. For instance, navigating between each page in a tabs interface will only call each page's ",
      [
        "code",
        null,
        "ngOnInit"
      ],
      " method once, but not on subsequent visits. ",
      [
        "code",
        null,
        "ngOnDestroy"
      ],
      " will only fire when a page \"popped\"."
    ],
    " ",
    [
      "h2",
      {
        "id": "route-guards"
      },
      " ",
      [
        "a",
        {
          "href": "#route-guards"
        },
        "Route Guards"
      ],
      " "
    ],
    " ",
    [
      "p",
      null,
      "In Ionic 3, there were a couple of additional life cycle methods that were useful to control when a page could be entered (",
      [
        "code",
        null,
        "ionViewCanEnter"
      ],
      ") and left (",
      [
        "code",
        null,
        "ionViewCanLeave"
      ],
      "). These could be used to protect pages from unauthorized users and to keep a user on a page when you don't want them to leave (like during a form fill)."
    ],
    " ",
    [
      "p",
      null,
      "These methods were removed in Ionic 4 in favor of using Angular's Route Guards. "
    ],
    " ",
    [
      "p",
      null,
      "A route guard helps determine if a particular action can be taken against a route. They are classes that implement a certain interface. The ",
      [
        "code",
        null,
        "CanActivate"
      ],
      " and ",
      [
        "code",
        null,
        "CanDeactivate"
      ],
      " interfaces can be used to implement the same type of logic that the removed events ",
      [
        "code",
        null,
        "ionViewCanEnter"
      ],
      " and ",
      [
        "code",
        null,
        "ionViewCanLeave"
      ],
      " did."
    ],
    " ",
    [
      "docs-code",
      {
        "language": "typescript"
      },
      " ",
      [
        "pre",
        null,
        [
          "code",
          null,
          "@",
          [
            "span",
            {
              "class": "token function"
            },
            "Injectable"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          "\n",
          [
            "span",
            {
              "class": "token keyword"
            },
            "export"
          ],
          " ",
          [
            "span",
            {
              "class": "token keyword"
            },
            "class"
          ],
          " ",
          [
            "span",
            {
              "class": "token class-name"
            },
            "AuthGuard"
          ],
          " ",
          [
            "span",
            {
              "class": "token keyword"
            },
            "implements"
          ],
          " ",
          [
            "span",
            {
              "class": "token class-name"
            },
            "CanActivate"
          ],
          " ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "{"
          ],
          "\n  ",
          [
            "span",
            {
              "class": "token keyword"
            },
            "constructor"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token parameter"
            },
            [
              "span",
              {
                "class": "token keyword"
              },
              "private"
            ],
            " authService",
            [
              "span",
              {
                "class": "token operator"
              },
              ":"
            ],
            " AuthService"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          " ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "{"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "}"
          ],
          "\n\n  ",
          [
            "span",
            {
              "class": "token function"
            },
            "canActivate"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token parameter"
            },
            "route",
            [
              "span",
              {
                "class": "token operator"
              },
              ":"
            ],
            " ActivatedRouteSnapshot",
            [
              "span",
              {
                "class": "token punctuation"
              },
              ","
            ],
            " state",
            [
              "span",
              {
                "class": "token operator"
              },
              ":"
            ],
            " RouterStateSnapshot"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          " ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "{"
          ],
          "\n    ",
          [
            "span",
            {
              "class": "token keyword"
            },
            "return"
          ],
          " ",
          [
            "span",
            {
              "class": "token keyword"
            },
            "this"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          "authService",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "."
          ],
          [
            "span",
            {
              "class": "token function"
            },
            "isAuthenticated"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            "("
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ")"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ";"
          ],
          "\n  ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "}"
          ],
          "\n",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "}"
          ]
        ]
      ],
      " "
    ],
    " ",
    [
      "p",
      null,
      "To use this guard, add it to the appropriate param in the route definition:"
    ],
    " ",
    [
      "docs-code",
      {
        "language": "typescript"
      },
      " ",
      [
        "pre",
        null,
        [
          "code",
          null,
          [
            "span",
            {
              "class": "token punctuation"
            },
            "{"
          ],
          " path",
          [
            "span",
            {
              "class": "token operator"
            },
            ":"
          ],
          " ",
          [
            "span",
            {
              "class": "token string"
            },
            "'settings'"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          " canActivate",
          [
            "span",
            {
              "class": "token operator"
            },
            ":"
          ],
          " ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "["
          ],
          "AuthGuard",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "]"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          " loadChildren",
          [
            "span",
            {
              "class": "token operator"
            },
            ":"
          ],
          " ",
          [
            "span",
            {
              "class": "token string"
            },
            "'...'"
          ],
          [
            "span",
            {
              "class": "token punctuation"
            },
            ","
          ],
          "  ",
          [
            "span",
            {
              "class": "token punctuation"
            },
            "}"
          ]
        ]
      ],
      " "
    ],
    " ",
    [
      "p",
      null,
      "For more info on how to use route guards, go to Angular's ",
      [
        "a",
        {
          "href": "https://angular.io/guide/router"
        },
        "router documentation"
      ],
      "."
    ],
    " ",
    [
      "h2",
      {
        "id": "guidance-for-each-life-cycle-method"
      },
      " ",
      [
        "a",
        {
          "href": "#guidance-for-each-life-cycle-method"
        },
        "Guidance for Each Life Cycle Method"
      ],
      " "
    ],
    " ",
    [
      "p",
      null,
      "Below are some tips on uses cases for each of the life cycle events."
    ],
    " ",
    [
      "ul",
      null,
      " ",
      [
        "li",
        null,
        [
          "code",
          null,
          "ngOnInit"
        ],
        " - Initialize your component and load data from services that don't need refreshing on each subsequent visit."
      ],
      " ",
      [
        "li",
        null,
        [
          "code",
          null,
          "ionViewWillEnter"
        ],
        " - Since ",
        [
          "code",
          null,
          "ionViewWillEnter"
        ],
        " is called every time the view is navigated to (regardless if initialized or not), it's a good method to load data from services. However, if your data comes back during the animation, it can start lots of DOM manipulation, which can cause some janky animations."
      ],
      " ",
      [
        "li",
        null,
        [
          "code",
          null,
          "ionViewDidEnter"
        ],
        " - If you see performance problems from using ",
        [
          "code",
          null,
          "ionViewWillEnter"
        ],
        " when loading data, you can do your data calls in ",
        [
          "code",
          null,
          "ionViewDidEnter"
        ],
        " instead. This event won't fire until after the page is visible by the user, however, so you might want to use either a loading indicator or a skeleton screen, so content doesn't flash in un-naturally after the transition is complete."
      ],
      " ",
      [
        "li",
        null,
        [
          "code",
          null,
          "ionViewWillLeave"
        ],
        " - Can be used for cleanup, like unsubscribing from observables. Since ",
        [
          "code",
          null,
          "ngOnDestroy"
        ],
        " might not fire when you navigate from the current page, put your cleanup code here if you don't want it active while the screen is not in view."
      ],
      " ",
      [
        "li",
        null,
        [
          "code",
          null,
          "ionViewDidLeave"
        ],
        " - When this event fires, you know the new page has fully transitioned in, so any logic you might not normally do when the view is visible can go here."
      ],
      " ",
      [
        "li",
        null,
        [
          "code",
          null,
          "ngOnDestroy"
        ],
        " - Cleanup logic for your pages that you don't want to clean up in ",
        [
          "code",
          null,
          "ionViewWillLeave"
        ],
        "."
      ],
      " "
    ]
  ],
  "title": "Ionic Page Life Cycle",
  "headings": [
    {
      "text": "Angular Life Cycle Events",
      "href": "#angular-life-cycle-events"
    },
    {
      "text": "Ionic Page Events",
      "href": "#ionic-page-events"
    },
    {
      "text": "How Ionic Handles the Life of a Page",
      "href": "#how-ionic-handles-the-life-of-a-page"
    },
    {
      "text": "Route Guards",
      "href": "#route-guards"
    },
    {
      "text": "Guidance for Each Life Cycle Method",
      "href": "#guidance-for-each-life-cycle-method"
    }
  ],
  "pageClass": "page-angular-lifecycle"
}
